<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 未来可期的博客</title>
    <link>http://shansec.github.io/post/</link>
    <description>Recent content in Posts on 未来可期的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 26 Jun 2024 11:29:09 +0800</lastBuildDate><atom:link href="http://shansec.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Typescript Declare关键字</title>
      <link>http://shansec.github.io/post/ts/Typescript-declare%E5%85%B3%E9%94%AE%E5%AD%97/</link>
      <pubDate>Wed, 26 Jun 2024 11:29:09 +0800</pubDate>
      
      <guid>http://shansec.github.io/post/ts/Typescript-declare%E5%85%B3%E9%94%AE%E5%AD%97/</guid>
      <description>简介 declare 关键字用来告诉编译器，某个类型是存在的，可以在当前文件中使用。 它的主要作用，就是让当前文件可以使用其他文件声明的类型。举例来说，自己的脚本使用外部库定义的函数，编译器会因为不知道外部函数的类型定义而报错，这时就可以在自己的脚本里面使用declare关键字，告诉编译器外部函数</description>
    </item>
    
    <item>
      <title>Typescript 模块</title>
      <link>http://shansec.github.io/post/ts/Typescript-%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Wed, 26 Jun 2024 11:16:23 +0800</pubDate>
      
      <guid>http://shansec.github.io/post/ts/Typescript-%E6%A8%A1%E5%9D%97/</guid>
      <description>简介 任何包含 import 或 export 语句的文件，就是一个模块（module）。相应地，如果文件不包含 export 语句，就是一个全局的脚本文件。 模块本身就是一个作用域，不属于全局作用域。模块内部的变量、函数、类只在内部可见，对于模块外部是不可见的。暴露给外部的接口，必须用 export 命令声明；如果其他文件要使用模块的接</description>
    </item>
    
    <item>
      <title>Typescript 类型断言</title>
      <link>http://shansec.github.io/post/ts/Typescript-%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80/</link>
      <pubDate>Wed, 26 Jun 2024 10:59:25 +0800</pubDate>
      
      <guid>http://shansec.github.io/post/ts/Typescript-%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80/</guid>
      <description>简介 对于没有类型声明的值，TypeScript 会进行类型推断，很多时候得到的结果，未必是开发者想要的。 type T = &amp;#39;a&amp;#39;|&amp;#39;b&amp;#39;|&amp;#39;c&amp;#39;; let foo = &amp;#39;a&amp;#39;; let bar:T = foo; // 报错 上面示例中，最后一行报错，原因是 TypeScript 推断变量foo的类型是string，而变量bar的类型是&#39;a&#39;|&#39;b&#39;|&#39;c&#39;，前者是后者的父类型。父类型不能赋值</description>
    </item>
    
    <item>
      <title>Typescript Enum类型</title>
      <link>http://shansec.github.io/post/ts/Typescript-Enum%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Wed, 26 Jun 2024 09:45:05 +0800</pubDate>
      
      <guid>http://shansec.github.io/post/ts/Typescript-Enum%E7%B1%BB%E5%9E%8B/</guid>
      <description>简介 实际开发中，经常需要定义一组相关的常量。 const RED = 1; const GREEN = 2; const BLUE = 3; let color = userInput(); if (color === RED) {/* */} if (color === GREEN) {/* */} if (color === BLUE) {/* */} throw new Error(&amp;#39;wrong color&amp;#39;); 上面示例中，常量RED、GREEN、BLUE是相关的，意为变量color的三个可能的取值。它们具体等于什么值其实并不重要，只要不相等就可以了。 TypeScript 就设计了 Enum 结构，</description>
    </item>
    
    <item>
      <title>Typescript 泛型</title>
      <link>http://shansec.github.io/post/ts/Typescript-%E6%B3%9B%E5%9E%8B/</link>
      <pubDate>Wed, 26 Jun 2024 09:37:16 +0800</pubDate>
      
      <guid>http://shansec.github.io/post/ts/Typescript-%E6%B3%9B%E5%9E%8B/</guid>
      <description>简介 有些时候，函数返回值的类型与参数类型是相关的。 function getFirst(arr) { return arr[0]; } 上面示例中，函数getFirst()总是返回参数数组的第一个成员。参数数组是什么类型，返回值就是什么类型。 这个函数的类型声明只能写成下面这样。 function f(arr:any[]):any { return arr[0]; } 上面的类型声明，就反映不出参数与返回值之间的类型关系。 为了解决这</description>
    </item>
    
    <item>
      <title>Typescript Class类型</title>
      <link>http://shansec.github.io/post/ts/Typescript-class%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Tue, 25 Jun 2024 12:15:48 +0800</pubDate>
      
      <guid>http://shansec.github.io/post/ts/Typescript-class%E7%B1%BB%E5%9E%8B/</guid>
      <description>简介 类（class）是面向对象编程的基本构件，封装了属性和方法，TypeScript 给予了全面支持。 属性的类型 类的属性可以在顶层声明，也可以在构造方法内部声明。 对于顶层声明的属性，可以在声明时同时给出类型。 class Point { x:number; y:number; } 上面声明中，属性x和y的类型都是number。 如果不给出类型，</description>
    </item>
    
    <item>
      <title>Typescript Interface</title>
      <link>http://shansec.github.io/post/ts/Typescript-interface/</link>
      <pubDate>Mon, 24 Jun 2024 11:23:55 +0800</pubDate>
      
      <guid>http://shansec.github.io/post/ts/Typescript-interface/</guid>
      <description>简介 interface 是对象的模板，可以看作是一种类型约定，中文译为“接口”。使用了某个模板的对象，就拥有了指定的类型结构。 interface Person { firstName: string; lastName: string; age: number; } 上面示例中，定义了一个接口Person，它指定一个对象模板，拥有三个属性firstName、lastName和age。任何实现这个接口的对象，都必须部署</description>
    </item>
    
    <item>
      <title>Typescript 函数类型</title>
      <link>http://shansec.github.io/post/ts/typescript-%E5%87%BD%E6%95%B0%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Sat, 22 Jun 2024 11:31:20 +0800</pubDate>
      
      <guid>http://shansec.github.io/post/ts/typescript-%E5%87%BD%E6%95%B0%E7%B1%BB%E5%9E%8B/</guid>
      <description>简介 函数的类型声明，需要在声明函数时，给出参数的类型和返回值的类型。 function hello( txt:string ):void { console.log(&amp;#39;hello &amp;#39; + txt); } 上面示例中，函数hello()在声明时，需要给出参数txt的类型（string），以及返回值的类型（void），后者写在参数列表的圆括号后面。void类型表示没有返回值，详见后文。 如果不指定参</description>
    </item>
    
    <item>
      <title>Typescript 对象类型</title>
      <link>http://shansec.github.io/post/ts/typescript-%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Sat, 22 Jun 2024 11:31:20 +0800</pubDate>
      
      <guid>http://shansec.github.io/post/ts/typescript-%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B/</guid>
      <description>简介 除了原始类型，对象是 JavaScript 最基本的数据结构。TypeScript 对于对象类型有很多规则。 对象类型的最简单声明方法，就是使用大括号表示对象，在大括号内部声明每个属性和方法的类型。 const obj:{ x:number; y:number; } = { x: 1, y: 1 }; 上面示例中，对象obj的类型就写在变量名后面，使用大括号描述，内部声明每个属性的</description>
    </item>
    
    <item>
      <title>Typescript 数组类型</title>
      <link>http://shansec.github.io/post/ts/typescript-%E5%85%83%E7%BB%84%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Sat, 22 Jun 2024 11:31:20 +0800</pubDate>
      
      <guid>http://shansec.github.io/post/ts/typescript-%E5%85%83%E7%BB%84%E7%B1%BB%E5%9E%8B/</guid>
      <description>简介 元组（tuple）是 TypeScript 特有的数据类型，JavaScript 没有单独区分这种类型。它表示成员类型可以自由设置的数组，即数组的各个成员的类型可以不同。 由于成员的类型可以不一样，所以元组必须明确声明每个成员的类型。 const s:[string, string, boolean] = [&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, true]; 上面示例中，元组s的前两个成员的类型是string，</description>
    </item>
    
    <item>
      <title>Typescript 数组类型</title>
      <link>http://shansec.github.io/post/ts/typescript-%E6%95%B0%E7%BB%84%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Sat, 22 Jun 2024 11:31:20 +0800</pubDate>
      
      <guid>http://shansec.github.io/post/ts/typescript-%E6%95%B0%E7%BB%84%E7%B1%BB%E5%9E%8B/</guid>
      <description>JavaScript 数组在 TypeScript 里面分成两种类型，分别是数组（array）和元组（tuple）。 简介 TypeScript 数组有一个根本特征：所有成员的类型必须相同，但是成员数量是不确定的，可以是无限数量的成员，也可以是零成员。 数组的类型有两种写法。第一种写法是在数组成员的类型后面，加上一对方括号。 let arr:number[] = [1, 2, 3]; 上面示例中</description>
    </item>
    
    <item>
      <title>Typescript 类型系统</title>
      <link>http://shansec.github.io/post/ts/typescript-%E7%B1%BB%E5%9E%8B%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Sat, 22 Jun 2024 11:16:19 +0800</pubDate>
      
      <guid>http://shansec.github.io/post/ts/typescript-%E7%B1%BB%E5%9E%8B%E7%B3%BB%E7%BB%9F/</guid>
      <description>TypeScript 继承了 JavaScript 的类型，在这个基础上，定义了一套自己的类型系统。 基本类型 概述 JavaScript 语言（注意，不是 TypeScript）将值分成8种类型。 boolean string number bigint symbol object undefined null TypeScript 继承了 JavaScript 的类型设计，以上8种类型可以看作 TypeScript 的基本类型。 注意，上面所有类型的名称都是小写字母，首字母大写的Number、String、B</description>
    </item>
    
    <item>
      <title>Typescript Any类型和unknown类型和never类型</title>
      <link>http://shansec.github.io/post/ts/typescript-any%E7%B1%BB%E5%9E%8B%E5%92%8Cunknown%E7%B1%BB%E5%9E%8B%E5%92%8Cnever%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Sat, 22 Jun 2024 10:39:28 +0800</pubDate>
      
      <guid>http://shansec.github.io/post/ts/typescript-any%E7%B1%BB%E5%9E%8B%E5%92%8Cunknown%E7%B1%BB%E5%9E%8B%E5%92%8Cnever%E7%B1%BB%E5%9E%8B/</guid>
      <description>any 类型，unknown 类型，never 类型 本章介绍 TypeScript 的三种特殊类型，它们可以作为学习 TypeScript 类型系统的起点。 any 类型 基本含义 any 类型表示没有任何限制，该类型的变量可以赋予任意类型的值。 let x:any; x = 1; // 正确 x = &amp;#39;foo&amp;#39;; // 正确 x = true; // 正确 上面示例中，变量x的类型是any，就可以被赋值为任意类型的值。 变量</description>
    </item>
    
    <item>
      <title>Typescript 基本用法</title>
      <link>http://shansec.github.io/post/ts/typescript-%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</link>
      <pubDate>Sat, 22 Jun 2024 10:25:32 +0800</pubDate>
      
      <guid>http://shansec.github.io/post/ts/typescript-%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</guid>
      <description>类型声明 TypeScript 代码最明显的特征，就是为 JavaScript 变量加上了类型声明。 let foo:string; 上面示例中，变量foo的后面使用冒号，声明了它的类型为string。 类型声明的写法，一律为在标识符后面添加“冒号 + 类型”。函数参数和返回值，也是这样来声明类型。 function toString(num:number):string { return String(num); } 上面示例中，函数toString()的参数num</description>
    </item>
    
    <item>
      <title>运算符的扩展</title>
      <link>http://shansec.github.io/post/es6/%E8%BF%90%E7%AE%97%E7%AC%A6%E7%9A%84%E6%89%A9%E5%B1%95/</link>
      <pubDate>Wed, 24 Apr 2024 10:18:40 +0800</pubDate>
      
      <guid>http://shansec.github.io/post/es6/%E8%BF%90%E7%AE%97%E7%AC%A6%E7%9A%84%E6%89%A9%E5%B1%95/</guid>
      <description>本章介绍 ES6 后续标准添加的一些运算符。 指数运算符 ES2016 新增了一个指数运算符（**）。 2 ** 2 // 4 2 ** 3 // 8 这个运算符的一个特点是右结合，而不是常见的左结合。多个指数运算符连用时，是从最右边开始计算的。 // 相当于 2 ** (3 ** 2) 2 ** 3 ** 2 // 512 上面代码中，首先计算的是第二个指数运算符，而不是第一个。</description>
    </item>
    
    <item>
      <title>装饰器</title>
      <link>http://shansec.github.io/post/es6/%E8%A3%85%E9%A5%B0%E5%99%A8/</link>
      <pubDate>Wed, 24 Apr 2024 10:18:24 +0800</pubDate>
      
      <guid>http://shansec.github.io/post/es6/%E8%A3%85%E9%A5%B0%E5%99%A8/</guid>
      <description>[说明] Decorator 提案经历了重大的语法变化，目前处于第三阶段，定案之前不知道是否还有变化。本章现在属于草稿阶段，凡是标注“新语法”的章节，都是基于当前的语法，不过没有详细整理，只是一些原始材料；未标注“新语法”的章节基于以前的语法，是过去遗留的稿子。之所以保留以前的内容，有两个原因，一是</description>
    </item>
    
    <item>
      <title>正则的扩展</title>
      <link>http://shansec.github.io/post/es6/%E6%AD%A3%E5%88%99%E7%9A%84%E6%89%A9%E5%B1%95/</link>
      <pubDate>Wed, 24 Apr 2024 10:18:04 +0800</pubDate>
      
      <guid>http://shansec.github.io/post/es6/%E6%AD%A3%E5%88%99%E7%9A%84%E6%89%A9%E5%B1%95/</guid>
      <description>RegExp 构造函数 在 ES5 中，RegExp构造函数的参数有两种情况。 第一种情况是，参数是字符串，这时第二个参数表示正则表达式的修饰符（flag）。 var regex = new RegExp(&amp;#39;xyz&amp;#39;, &amp;#39;i&amp;#39;); // 等价于 var regex = /xyz/i; 第二种情况是，参数是一个正则表示式，这时会返回一个原有正则表达式的拷贝。 var regex = new RegExp(/xyz/i); // 等价于 var regex = /xyz/i; 但是，ES5 不允许此</description>
    </item>
    
    <item>
      <title>数组的扩展</title>
      <link>http://shansec.github.io/post/es6/%E6%95%B0%E7%BB%84%E7%9A%84%E6%89%A9%E5%B1%95/</link>
      <pubDate>Wed, 24 Apr 2024 10:17:45 +0800</pubDate>
      
      <guid>http://shansec.github.io/post/es6/%E6%95%B0%E7%BB%84%E7%9A%84%E6%89%A9%E5%B1%95/</guid>
      <description>扩展运算符 含义 扩展运算符（spread）是三个点（...）。它好比 rest 参数的逆运算，将一个数组转为用逗号分隔的参数序列。 console.log(...[1, 2, 3]) // 1 2 3 console.log(1, ...[2, 3, 4], 5) // 1 2 3 4 5 [...document.querySelectorAll(&amp;#39;div&amp;#39;)] // [&amp;lt;div&amp;gt;, &amp;lt;div&amp;gt;, &amp;lt;div&amp;gt;] 该运算符主要用于函数调用。 function push(array, ...items) { array.push(...items); } function add(x, y) { return x + y; } const numbers = [4, 38]; add(...numbers) // 42 上面代码中，array.push(...it</description>
    </item>
    
    <item>
      <title>数值的扩展</title>
      <link>http://shansec.github.io/post/es6/%E6%95%B0%E5%80%BC%E7%9A%84%E6%89%A9%E5%B1%95/</link>
      <pubDate>Wed, 24 Apr 2024 10:17:24 +0800</pubDate>
      
      <guid>http://shansec.github.io/post/es6/%E6%95%B0%E5%80%BC%E7%9A%84%E6%89%A9%E5%B1%95/</guid>
      <description>二进制和八进制表示法 ES6 提供了二进制和八进制数值的新的写法，分别用前缀0b（或0B）和0o（或0O）表示。 0b111110111 === 503 // true 0o767 === 503 // true 从 ES5 开始，在严格模式之中，八进制就不再允许使用前缀0表示，ES6 进一步明确，要使用前缀0o表示。 // 非严格模式 (function(){ console.log(0o11 === 011); })() // true // 严格模式 (function(){ &amp;#39;use strict&amp;#39;; console.log(0o11 === 011); })() // Uncaught SyntaxError: Octal literals</description>
    </item>
    
    <item>
      <title>异步遍历器</title>
      <link>http://shansec.github.io/post/es6/%E5%BC%82%E6%AD%A5%E9%81%8D%E5%8E%86%E5%99%A8/</link>
      <pubDate>Wed, 24 Apr 2024 10:17:02 +0800</pubDate>
      
      <guid>http://shansec.github.io/post/es6/%E5%BC%82%E6%AD%A5%E9%81%8D%E5%8E%86%E5%99%A8/</guid>
      <description>同步遍历器的问题 《遍历器》一章说过，Iterator 接口是一种数据遍历的协议，只要调用遍历器对象的next方法，就会得到一个对象，表示当前遍历指针所在的那个位置的信息。next方法返回的对象的结构是{value, done}，其中value表示当前的数据的值，done是一个布尔值，</description>
    </item>
    
    <item>
      <title>对象的新增方法</title>
      <link>http://shansec.github.io/post/es6/%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%96%B0%E5%A2%9E%E6%96%B9%E6%B3%95/</link>
      <pubDate>Wed, 24 Apr 2024 10:07:59 +0800</pubDate>
      
      <guid>http://shansec.github.io/post/es6/%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%96%B0%E5%A2%9E%E6%96%B9%E6%B3%95/</guid>
      <description>本章介绍 Object 对象的新增方法。 Object.is() ES5 比较两个值是否相等，只有两个运算符：相等运算符（==）和严格相等运算符（===）。它们都有缺点，前者会自动转换数据类型，后者的NaN不等于自身，以及+0等于-0。JavaScript 缺乏一种运算，在所有环境中，只要两个值是一样的，它们就应该相等。 ES6 提</description>
    </item>
    
    <item>
      <title>对象的扩展</title>
      <link>http://shansec.github.io/post/es6/%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%89%A9%E5%B1%95/</link>
      <pubDate>Wed, 24 Apr 2024 10:05:20 +0800</pubDate>
      
      <guid>http://shansec.github.io/post/es6/%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%89%A9%E5%B1%95/</guid>
      <description>对象（object）是 JavaScript 最重要的数据结构。ES6 对它进行了重大升级，本章介绍数据结构本身的改变，下一章介绍Object对象的新增方法。 属性的简洁表示法 ES6 允许在大括号里面，直接写入变量和函数，作为对象的属性和方法。这样的书写更加简洁。 const foo = &amp;#39;bar&amp;#39;; const baz = {foo}; baz // {foo: &amp;#34;bar&amp;#34;} // 等同于 const baz = {foo: foo}; 上面代</description>
    </item>
    
    <item>
      <title>字符串的新增方法</title>
      <link>http://shansec.github.io/post/es6/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%96%B0%E5%A2%9E%E6%96%B9%E6%B3%95/</link>
      <pubDate>Wed, 24 Apr 2024 10:01:37 +0800</pubDate>
      
      <guid>http://shansec.github.io/post/es6/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%96%B0%E5%A2%9E%E6%96%B9%E6%B3%95/</guid>
      <description>本章介绍字符串对象的新增方法。 String.fromCodePoint() ES5 提供String.fromCharCode()方法，用于从 Unicode 码点返回对应字符，但是这个方法不能识别码点大于0xFFFF的字符。 String.fromCharCode(0x20BB7) // &amp;#34;ஷ&amp;#34; 上面代码中，String.fromCharCode()不能识别大于0xFFFF的码点，所以0x</description>
    </item>
    
    <item>
      <title>字符串的扩展</title>
      <link>http://shansec.github.io/post/es6/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%89%A9%E5%B1%95/</link>
      <pubDate>Wed, 24 Apr 2024 09:58:44 +0800</pubDate>
      
      <guid>http://shansec.github.io/post/es6/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%89%A9%E5%B1%95/</guid>
      <description>本章介绍 ES6 对字符串的改造和增强，下一章介绍字符串对象的新增方法。 字符的 Unicode 表示法 ES6 加强了对 Unicode 的支持，允许采用\uxxxx形式表示一个字符，其中xxxx表示字符的 Unicode 码点。 &amp;#34;\u0061&amp;#34; // &amp;#34;a&amp;#34; 但是，这种表示法只限于码点在\u0000~\uFFFF之间的字符。超出这个范围的字符，必须用两个双字节的形式</description>
    </item>
    
    <item>
      <title>变量解构赋值</title>
      <link>http://shansec.github.io/post/es6/%E5%8F%98%E9%87%8F%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC/</link>
      <pubDate>Wed, 24 Apr 2024 09:55:21 +0800</pubDate>
      
      <guid>http://shansec.github.io/post/es6/%E5%8F%98%E9%87%8F%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC/</guid>
      <description>变量的解构赋值 数组的解构赋值 基本用法 ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。 以前，为变量赋值，只能直接指定值。 let a = 1; let b = 2; let c = 3; ES6 允许写成下面这样。 let [a, b, c] = [1, 2, 3]; 上面代码表示，可以从数组中提取值，按照对应位置，</description>
    </item>
    
    <item>
      <title>函数的扩展</title>
      <link>http://shansec.github.io/post/es6/%E5%87%BD%E6%95%B0%E7%9A%84%E6%89%A9%E5%B1%95/</link>
      <pubDate>Wed, 24 Apr 2024 09:49:04 +0800</pubDate>
      
      <guid>http://shansec.github.io/post/es6/%E5%87%BD%E6%95%B0%E7%9A%84%E6%89%A9%E5%B1%95/</guid>
      <description>函数参数的默认值 基本用法 ES6 之前，不能直接为函数的参数指定默认值，只能采用变通的方法。 function log(x, y) { y = y || &amp;#39;World&amp;#39;; console.log(x, y); } log(&amp;#39;Hello&amp;#39;) // Hello World log(&amp;#39;Hello&amp;#39;, &amp;#39;China&amp;#39;) // Hello China log(&amp;#39;Hello&amp;#39;, &amp;#39;&amp;#39;) // Hello World 上面代码检查函数log()的参数y有没有赋值，如果没有，则指定默认值为World。这种写法的缺点在于，如果参数y赋值了，但是对应的布尔值为fal</description>
    </item>
    
    <item>
      <title>函数式编程</title>
      <link>http://shansec.github.io/post/es6/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</link>
      <pubDate>Wed, 24 Apr 2024 09:47:58 +0800</pubDate>
      
      <guid>http://shansec.github.io/post/es6/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</guid>
      <description>JavaScript 语言从一诞生，就具有函数式编程的烙印。它将函数作为一种独立的数据类型，与其他数据类型处于完全平等的地位。在 JavaScript 语言中，你可以采用面向对象编程，也可以采用函数式编程。有人甚至说，JavaScript 是有史以来第一种被大规模采用的函数式编程语言。 ES6 的种种新增功能，使得函数式编程变得更</description>
    </item>
    
    <item>
      <title>Symbol</title>
      <link>http://shansec.github.io/post/es6/Symbol/</link>
      <pubDate>Wed, 24 Apr 2024 09:43:59 +0800</pubDate>
      
      <guid>http://shansec.github.io/post/es6/Symbol/</guid>
      <description>概述 ES5 的对象属性名都是字符串，这容易造成属性名的冲突。比如，你使用了一个他人提供的对象，但又想为这个对象添加新的方法（mixin 模式），新方法的名字就有可能与现有方法产生冲突。如果有一种机制，保证每个属性的名字都是独一无二的就好了，这样就从根本上防止属性名的冲突。这就是 ES6 引入Sy</description>
    </item>
    
    <item>
      <title>Set和Map数据结构</title>
      <link>http://shansec.github.io/post/es6/Set%E5%92%8CMap%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
      <pubDate>Wed, 24 Apr 2024 09:39:22 +0800</pubDate>
      
      <guid>http://shansec.github.io/post/es6/Set%E5%92%8CMap%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid>
      <description>Set 基本用法 ES6 提供了新的数据结构 Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。 Set本身是一个构造函数，用来生成 Set 数据结构。 const s = new Set(); [2, 3, 5, 4, 5, 2, 2].forEach(x =&amp;gt; s.add(x)); for (let i of s) { console.log(i); } // 2 3 5 4 上面代码通过add()方法向 Set 结构加入成员，结果表明 Set 结构不会添加重复的值。 Set函数可以</description>
    </item>
    
    <item>
      <title>Reflect</title>
      <link>http://shansec.github.io/post/es6/Reflect/</link>
      <pubDate>Tue, 23 Apr 2024 10:31:38 +0800</pubDate>
      
      <guid>http://shansec.github.io/post/es6/Reflect/</guid>
      <description>概述 Reflect对象与Proxy对象一样，也是 ES6 为了操作对象而提供的新 API。Reflect对象的设计目的有这样几个。 （1） 将Object对象的一些明显属于语言内部的方法（比如Object.defineProperty），放到Reflect对象上。现阶段，某些方法同时在Obje</description>
    </item>
    
    <item>
      <title>Proxy</title>
      <link>http://shansec.github.io/post/es6/Proxy/</link>
      <pubDate>Tue, 23 Apr 2024 10:28:38 +0800</pubDate>
      
      <guid>http://shansec.github.io/post/es6/Proxy/</guid>
      <description>概述 Proxy 用于修改某些操作的默认行为，等同于在语言层面做出修改，所以属于一种“元编程”（meta programming），即对编程语言进行编程。 Proxy 可以理解成，在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。</description>
    </item>
    
    <item>
      <title>Promise对象</title>
      <link>http://shansec.github.io/post/es6/Promise%E5%AF%B9%E8%B1%A1/</link>
      <pubDate>Tue, 23 Apr 2024 10:25:57 +0800</pubDate>
      
      <guid>http://shansec.github.io/post/es6/Promise%E5%AF%B9%E8%B1%A1/</guid>
      <description>Promise 的含义 Promise 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大。它由社区最早提出和实现，ES6 将其写进了语言标准，统一了用法，原生提供了Promise对象。 所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结</description>
    </item>
    
    <item>
      <title>Module的语法</title>
      <link>http://shansec.github.io/post/es6/Module%E7%9A%84%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Tue, 23 Apr 2024 10:22:07 +0800</pubDate>
      
      <guid>http://shansec.github.io/post/es6/Module%E7%9A%84%E8%AF%AD%E6%B3%95/</guid>
      <description>概述 历史上，JavaScript 一直没有模块（module）体系，无法将一个大程序拆分成互相依赖的小文件，再用简单的方法拼装起来。其他语言都有这项功能，比如 Ruby 的require、Python 的import，甚至就连 CSS 都有@import，但是 JavaScript 任何这方面的支持都没有，这对开发大型的、</description>
    </item>
    
    <item>
      <title>Module的加载实现</title>
      <link>http://shansec.github.io/post/es6/Module%E7%9A%84%E5%8A%A0%E8%BD%BD%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Tue, 23 Apr 2024 10:17:05 +0800</pubDate>
      
      <guid>http://shansec.github.io/post/es6/Module%E7%9A%84%E5%8A%A0%E8%BD%BD%E5%AE%9E%E7%8E%B0/</guid>
      <description>上一章介绍了模块的语法，本章介绍如何在浏览器和 Node.js 之中加载 ES6 模块，以及实际开发中经常遇到的一些问题（比如循环加载）。 浏览器加载 传统方法 HTML 网页中，浏览器通过&amp;lt;script&amp;gt;标签加载 JavaScript 脚本。 &amp;lt;!-- 页面内嵌的脚本 --&amp;gt; &amp;lt;script type=&amp;#34;application/javascript&amp;#34;&amp;gt; // module code &amp;lt;/script&amp;gt; &amp;lt;!-- 外部脚本 --&amp;gt; &amp;lt;script type=&amp;#34;application/javascript&amp;#34; src=&amp;#34;path/to/myModule.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; 上面代码中，由于浏览器脚本的默认语言</description>
    </item>
    
    <item>
      <title>Mixin</title>
      <link>http://shansec.github.io/post/es6/Mixin/</link>
      <pubDate>Tue, 23 Apr 2024 10:16:14 +0800</pubDate>
      
      <guid>http://shansec.github.io/post/es6/Mixin/</guid>
      <description>JavaScript 语言的设计是单一继承，即子类只能继承一个父类，不允许继承多个父类。这种设计保证了对象继承的层次结构是树状的，而不是复杂的网状结构。 但是，这大大降低了编程的灵活性。因为实际开发中，有时不可避免，子类需要继承多个父类。举例来说，“猫”可以继承“哺乳类动物”，也可以继承“宠物”。 各种</description>
    </item>
    
    <item>
      <title>Let和const命令</title>
      <link>http://shansec.github.io/post/es6/let%E5%92%8Cconst%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Tue, 23 Apr 2024 10:14:15 +0800</pubDate>
      
      <guid>http://shansec.github.io/post/es6/let%E5%92%8Cconst%E5%91%BD%E4%BB%A4/</guid>
      <description>let 命令 基本用法 ES6 新增了let命令，用来声明变量。它的用法类似于var，但是所声明的变量，只在let命令所在的代码块内有效。 { let a = 10; var b = 1; } a // ReferenceError: a is not defined. b // 1 上面代码在代码块之中，分别用let和var声明了两个变量。然后在代码块之外调用这两个变量，结果let声明的变量报错，v</description>
    </item>
    
    <item>
      <title>Iterator和for...of循环</title>
      <link>http://shansec.github.io/post/es6/Iterator%E5%92%8Cfor...of%E5%BE%AA%E7%8E%AF/</link>
      <pubDate>Tue, 23 Apr 2024 09:52:00 +0800</pubDate>
      
      <guid>http://shansec.github.io/post/es6/Iterator%E5%92%8Cfor...of%E5%BE%AA%E7%8E%AF/</guid>
      <description>Iterator（遍历器）的概念 JavaScript 原有的表示“集合”的数据结构，主要是数组（Array）和对象（Object），ES6 又添加了Map和Set。这样就有了四种数据集合，用户还可以组合使用它们，定义自己的数据结构，比如数组的成员是Map，Map的成员是对象。这样就需要一种统一的接口机</description>
    </item>
    
    <item>
      <title>Generator函数的语法</title>
      <link>http://shansec.github.io/post/es6/Generator%E5%87%BD%E6%95%B0%E7%9A%84%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Tue, 23 Apr 2024 09:48:29 +0800</pubDate>
      
      <guid>http://shansec.github.io/post/es6/Generator%E5%87%BD%E6%95%B0%E7%9A%84%E8%AF%AD%E6%B3%95/</guid>
      <description>简介 基本概念 Generator 函数是 ES6 提供的一种异步编程解决方案，语法行为与传统函数完全不同。本章详细介绍 Generator 函数的语法和 API，它的异步编程应用请看《Generator 函数的异步应用》一章。 Generator 函数有多种理解角度。语法上，首先可以把它理解成，Generator 函数是一个状态机，封装了多个内部状态。</description>
    </item>
    
    <item>
      <title>Generator函数的异步应用</title>
      <link>http://shansec.github.io/post/es6/Generator%E5%87%BD%E6%95%B0%E7%9A%84%E5%BC%82%E6%AD%A5%E5%BA%94%E7%94%A8/</link>
      <pubDate>Tue, 23 Apr 2024 09:44:19 +0800</pubDate>
      
      <guid>http://shansec.github.io/post/es6/Generator%E5%87%BD%E6%95%B0%E7%9A%84%E5%BC%82%E6%AD%A5%E5%BA%94%E7%94%A8/</guid>
      <description>异步编程对 JavaScript 语言太重要。JavaScript 语言的执行环境是“单线程”的，如果没有异步编程，根本没法用，非卡死不可。本章主要介绍 Generator 函数如何完成异步操作。 传统方法 ES6 诞生以前，异步编程的方法，大概有下面四种。 回调函数 事件监听 发布/订阅 Promise 对象 Generator 函数将 JavaScript 异步编程带入了一个全新的阶段。 基本</description>
    </item>
    
    <item>
      <title>Class继承</title>
      <link>http://shansec.github.io/post/es6/class%E7%BB%A7%E6%89%BF/</link>
      <pubDate>Tue, 23 Apr 2024 09:41:22 +0800</pubDate>
      
      <guid>http://shansec.github.io/post/es6/class%E7%BB%A7%E6%89%BF/</guid>
      <description>Class 的继承 简介 Class 可以通过extends关键字实现继承，让子类继承父类的属性和方法。extends 的写法比 ES5 的原型链继承，要清晰和方便很多。 class Point { } class ColorPoint extends Point { } 上面示例中，Point是父类，ColorPoint是子类，它通过extends关键字，继承了Point类的所有属性和方法。但</description>
    </item>
    
    <item>
      <title>Class的基本语法</title>
      <link>http://shansec.github.io/post/es6/class%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Tue, 23 Apr 2024 09:32:20 +0800</pubDate>
      
      <guid>http://shansec.github.io/post/es6/class%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</guid>
      <description>类的由来 JavaScript 语言中，生成实例对象的传统方法是通过构造函数。下面是一个例子。 function Point(x, y) { this.x = x; this.y = y; } Point.prototype.toString = function () { return &amp;#39;(&amp;#39; + this.x + &amp;#39;, &amp;#39; + this.y + &amp;#39;)&amp;#39;; }; var p = new Point(1, 2); 上面这种写法跟传统的面向对象语言（比如 C++ 和 Java）差异很大，很容易让新学习这门语言的程序员感到困惑。 ES6 提供了更接近传统语言的写法，引入了 C</description>
    </item>
    
    <item>
      <title>Async函数</title>
      <link>http://shansec.github.io/post/es6/async%E5%87%BD%E6%95%B0/</link>
      <pubDate>Tue, 23 Apr 2024 09:29:35 +0800</pubDate>
      
      <guid>http://shansec.github.io/post/es6/async%E5%87%BD%E6%95%B0/</guid>
      <description>含义 ES2017 标准引入了 async 函数，使得异步操作变得更加方便。 async 函数是什么？一句话，它就是 Generator 函数的语法糖。 前文有一个 Generator 函数，依次读取两个文件。 const fs = require(&amp;#39;fs&amp;#39;); const readFile = function (fileName) { return new Promise(function (resolve, reject) { fs.readFile(fileName, function(error, data) { if (error) return reject(error); resolve(data); }); }); }; const gen = function* () { const f1 = yield readFile(&amp;#39;/etc/fstab&amp;#39;); const f2 = yield readFile(&amp;#39;/etc/shells&amp;#39;); console.log(f1.toString()); console.log(f2.toString()); }; 上面代码的函数gen可以写成async函数，就是下面这样</description>
    </item>
    
    <item>
      <title>ArrayBuffer</title>
      <link>http://shansec.github.io/post/es6/ArrayBuffer/</link>
      <pubDate>Tue, 23 Apr 2024 09:27:20 +0800</pubDate>
      
      <guid>http://shansec.github.io/post/es6/ArrayBuffer/</guid>
      <description>`ArrayBuffer` 对象、TypedArray视图和DataView视图是 JavaScript 操作二进制数据的一个接口。这些对象早就存在，属于独立的规格（2011 年 2 月发布），ES6 将它们纳入了 ECMAScript 规格，并且增加了新的方法。它们都是以数组的语法处理二进制数据，所以统称为二进制数组。 这个接口的原始设计目的，与 WebGL 项目有关</description>
    </item>
    
    <item>
      <title>Cookie 和 Session</title>
      <link>http://shansec.github.io/post/Web/Cookie%E5%92%8CSession/</link>
      <pubDate>Sat, 20 Apr 2024 10:39:46 +0000</pubDate>
      
      <guid>http://shansec.github.io/post/Web/Cookie%E5%92%8CSession/</guid>
      <description>Cookie Cookie的由来 HTTP协议是无状态的，这就存在一个问题。 无状态的意思是每次请求都是独立的，它的执行情况和结果与前面的请求和之后的请求都无直接关系，它不会受前面的请求响应情况直接影响，也不会直接影响后面的请求响应情况。 一句有意思的话来描述就是人生只如初见，对服务器来说，每次的</description>
    </item>
    
    <item>
      <title>Gin框架介绍及使用</title>
      <link>http://shansec.github.io/post/Web/Gin%E6%A1%86%E6%9E%B6%E4%BB%8B%E7%BB%8D%E5%8F%8A%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sat, 20 Apr 2024 10:39:46 +0000</pubDate>
      
      <guid>http://shansec.github.io/post/Web/Gin%E6%A1%86%E6%9E%B6%E4%BB%8B%E7%BB%8D%E5%8F%8A%E4%BD%BF%E7%94%A8/</guid>
      <description>Gin是一个用Go语言编写的web框架。它是一个类似于martini但拥有更好性能的API框架, 由于使用了httprouter，速度提高了近40倍。 如果你是性能和高效的追求者, 你会爱上Gin。 Gin框架介绍 Go世界里最流行的Web框架，Github上有32K+star。 基于htt</description>
    </item>
    
    <item>
      <title>gin框架路由拆分与注册</title>
      <link>http://shansec.github.io/post/Web/gin%E6%A1%86%E6%9E%B6%E8%B7%AF%E7%94%B1%E6%8B%86%E5%88%86%E4%B8%8E%E6%B3%A8%E5%86%8C/</link>
      <pubDate>Sat, 20 Apr 2024 10:39:46 +0000</pubDate>
      
      <guid>http://shansec.github.io/post/Web/gin%E6%A1%86%E6%9E%B6%E8%B7%AF%E7%94%B1%E6%8B%86%E5%88%86%E4%B8%8E%E6%B3%A8%E5%86%8C/</guid>
      <description>gin框架路由拆分与注册 基本的路由注册 下面最基础的gin路由注册方式，适用于路由条目比较少的简单项目或者项目demo。 package main import ( &amp;#34;net/http&amp;#34; &amp;#34;github.com/gin-gonic/gin&amp;#34; ) func helloHandler(c *gin.Context) { c.JSON(http.StatusOK, gin.H{ &amp;#34;message&amp;#34;: &amp;#34;Hello q1mi!&amp;#34;, }) } func main() { r := gin.Default() r.GET(&amp;#34;/hello&amp;#34;, helloHandler) if err := r.Run(); err != nil { fmt.Println(&amp;#34;startup service failed, err:%v\n&amp;#34;, err) } } 路由拆分成单独文件或包 当项目的规模增大后就不太适合继续在项目的main.go文件</description>
    </item>
    
    <item>
      <title>Go 语言基础之反射</title>
      <link>http://shansec.github.io/post/%E5%9F%BA%E7%A1%80/Go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%8F%8D%E5%B0%84/</link>
      <pubDate>Sat, 20 Apr 2024 10:39:46 +0000</pubDate>
      
      <guid>http://shansec.github.io/post/%E5%9F%BA%E7%A1%80/Go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%8F%8D%E5%B0%84/</guid>
      <description>变量的内在机制 Go语言中的变量是分为两部分的: 类型信息：预先定义好的元信息。 值信息：程序运行过程中可动态变化的。 反射介绍 反射是指在程序运行期间对程序本身进行访问和修改的能力。程序在编译时，变量被转换为内存地址，变量名不会被编译器写入到可执行部分。在运行程序时，程序无法获取自身的信</description>
    </item>
    
    <item>
      <title>Go 语言基础之并发</title>
      <link>http://shansec.github.io/post/%E5%9F%BA%E7%A1%80/Go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%B9%B6%E5%8F%91/</link>
      <pubDate>Sat, 20 Apr 2024 10:39:46 +0000</pubDate>
      
      <guid>http://shansec.github.io/post/%E5%9F%BA%E7%A1%80/Go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%B9%B6%E5%8F%91/</guid>
      <description>基本概念 首先我们先来了解几个与并发编程相关的基本概念。 串行、并发与并行 串行：我们都是先读小学，小学毕业后再读初中，读完初中再读高中。 并发：同一时间段内执行多个任务（你在用微信和两个女朋友聊天）。 并行：同一时刻执行多个任务（你和你朋友都在用微信和女朋友聊天）。 进程、线程和协程 进程（</description>
    </item>
    
    <item>
      <title>Go操作MySQL—— sql 使用指南</title>
      <link>http://shansec.github.io/post/%E6%95%B0%E6%8D%AE%E5%BA%93/Go%E6%93%8D%E4%BD%9CMySQLsql%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</link>
      <pubDate>Sat, 20 Apr 2024 10:39:46 +0000</pubDate>
      
      <guid>http://shansec.github.io/post/%E6%95%B0%E6%8D%AE%E5%BA%93/Go%E6%93%8D%E4%BD%9CMySQLsql%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</guid>
      <description>Go操作MySQL 连接 Go语言中的 database/sql 包提供了保证SQL或类SQL数据库的泛用接口，并不提供具体的数据库驱动。使用 database/sql 包时必须注入（至少）一个数据库驱动。 我们常用的数据库基本上都有完整的第三方实现。例如：MySQL驱动 下载依赖 go get -u github.com/go-sql-driver/mysql 使用MySQL驱动 func Open(driverName, dataSourceName string) (*DB, error) Open打开一个 dirverName 指</description>
    </item>
    
    <item>
      <title>Go语言基础之error接口</title>
      <link>http://shansec.github.io/post/%E5%9F%BA%E7%A1%80/Go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E4%B9%8Berror%E6%8E%A5%E5%8F%A3/</link>
      <pubDate>Sat, 20 Apr 2024 10:39:46 +0000</pubDate>
      
      <guid>http://shansec.github.io/post/%E5%9F%BA%E7%A1%80/Go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E4%B9%8Berror%E6%8E%A5%E5%8F%A3/</guid>
      <description>Error接口和错误处理 Error 接口 Go 语言中把错误当成一种特殊的值来处理，不支持其他语言中使用try/catch捕获异常的方式。 Error 接口 Go 语言中使用一个名为 error 接口来表示错误类型。 type error interface { Error() string } error 接口只包含一个方法——Error，这个函数需要返回一个描述错误信息的字符串。 当一个函数或方法需</description>
    </item>
    
    <item>
      <title>Go语言基础之map</title>
      <link>http://shansec.github.io/post/%E5%9F%BA%E7%A1%80/Go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E4%B9%8Bmap/</link>
      <pubDate>Sat, 20 Apr 2024 10:39:46 +0000</pubDate>
      
      <guid>http://shansec.github.io/post/%E5%9F%BA%E7%A1%80/Go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E4%B9%8Bmap/</guid>
      <description>Go语言中提供的映射关系容器为map，其内部使用散列表（hash）实现。 map map是一种无序的基于key-value的数据结构，Go语言中的map是引用类型，必须初始化才能使用。 map 定义 Go语言中 map的定义语法如下： map[KeyType]ValueType 其中： KeyType:表示键的类型。 ValueType:表示键对</description>
    </item>
    
    <item>
      <title>Go语言基础之函数</title>
      <link>http://shansec.github.io/post/%E5%9F%BA%E7%A1%80/Go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%87%BD%E6%95%B0/</link>
      <pubDate>Sat, 20 Apr 2024 10:39:46 +0000</pubDate>
      
      <guid>http://shansec.github.io/post/%E5%9F%BA%E7%A1%80/Go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%87%BD%E6%95%B0/</guid>
      <description>函数 Go语言中支持函数、匿名函数和闭包，并且函数在Go语言中属于“一等公民”。 函数定义 Go语言中定义函数使用 func 关键字，具体格式如下： func 函数名(参数)(返回值){ 函数体 } 其中： 函数名：由字母、数字、下划线组成。但函数名的第一个字母不能是数字。在同一个包内，函数名也称不能重名（包的概</description>
    </item>
    
    <item>
      <title>Go语言基础之切片</title>
      <link>http://shansec.github.io/post/%E5%9F%BA%E7%A1%80/Go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%88%87%E7%89%87/</link>
      <pubDate>Sat, 20 Apr 2024 10:39:46 +0000</pubDate>
      
      <guid>http://shansec.github.io/post/%E5%9F%BA%E7%A1%80/Go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%88%87%E7%89%87/</guid>
      <description>引子 因为数组的长度是固定的并且数组长度属于类型的一部分，所以数组有很多的局限性。 例如： func arraySum(x [3]int) int{ sum := 0 for _, v := range x{ sum = sum + v } return sum } 这个求和函数只能接受[3]int类型，其他的都不支持。 再比如， a := [3]int{1, 2, 3} 数组a中已经有三个元素了，我们不能再继续往数组a中添加新元素了。 切片 切片（Sl</description>
    </item>
    
    <item>
      <title>Go语言基础之包</title>
      <link>http://shansec.github.io/post/%E5%9F%BA%E7%A1%80/Go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%8C%85/</link>
      <pubDate>Sat, 20 Apr 2024 10:39:46 +0000</pubDate>
      
      <guid>http://shansec.github.io/post/%E5%9F%BA%E7%A1%80/Go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%8C%85/</guid>
      <description>包与依赖管理 包（package） 包介绍 Go语言中支持模块化的开发理念，在Go语言中使用包（package）来支持代码模块化和代码复用。一个包是由一个或多个Go源码文件（.go结尾的文件）组成，是一种高级的代码复用方案，Go语言为我们提供了很多内置包，如fmt、os、io等。 定义包</description>
    </item>
    
    <item>
      <title>Go语言基础之单元测试</title>
      <link>http://shansec.github.io/post/%E5%9F%BA%E7%A1%80/Go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Sat, 20 Apr 2024 10:39:46 +0000</pubDate>
      
      <guid>http://shansec.github.io/post/%E5%9F%BA%E7%A1%80/Go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</guid>
      <description>go test工具 Go语言中的测试依赖go test命令。编写测试代码和编写普通的Go代码过程是类似的，并不需要学习新的语法、规则或工具。 go test命令是一个按照一定约定和组织的测试代码的驱动程序。在包目录内，所有以_test.go为后缀名的源代码文件都是go test测试的一部分，不会</description>
    </item>
    
    <item>
      <title>Go语言基础之变量与常亮</title>
      <link>http://shansec.github.io/post/%E5%9F%BA%E7%A1%80/Go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%8F%98%E9%87%8F%E5%92%8C%E5%B8%B8%E9%87%8F/</link>
      <pubDate>Sat, 20 Apr 2024 10:39:46 +0000</pubDate>
      
      <guid>http://shansec.github.io/post/%E5%9F%BA%E7%A1%80/Go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%8F%98%E9%87%8F%E5%92%8C%E5%B8%B8%E9%87%8F/</guid>
      <description>标识符和关键字 标识符 在编程语言中标识符就是程序员定义的具有特殊意义的词，比如变量名、常量名、函数名等等。 Go语言中标识符由字母数字和_(下划线）组成，并且只能以字母和开头。 关键字 关键字是指编程语言中预先定义好的具有特殊含义的标识符。 关键字和保留字都不建议用作变量名。 Go语言中有2</description>
    </item>
    
    <item>
      <title>Go语言基础之基本数据类型</title>
      <link>http://shansec.github.io/post/%E5%9F%BA%E7%A1%80/Go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Sat, 20 Apr 2024 10:39:46 +0000</pubDate>
      
      <guid>http://shansec.github.io/post/%E5%9F%BA%E7%A1%80/Go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
      <description>基本数据类型 整型 整型分为以下两个大类： 按长度分为：int8、int16、int32、int64 对应的无符号整型：uint8、uint16、uint32、uint64 其中，uint8就是我们熟知的byte型，int16对应C语言中的short型，int64对应C语言中的long型。</description>
    </item>
    
    <item>
      <title>Go语言基础之处理并发错误</title>
      <link>http://shansec.github.io/post/%E5%9F%BA%E7%A1%80/Go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%A4%84%E7%90%86%E5%B9%B6%E5%8F%91%E9%94%99%E8%AF%AF/</link>
      <pubDate>Sat, 20 Apr 2024 10:39:46 +0000</pubDate>
      
      <guid>http://shansec.github.io/post/%E5%9F%BA%E7%A1%80/Go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%A4%84%E7%90%86%E5%B9%B6%E5%8F%91%E9%94%99%E8%AF%AF/</guid>
      <description>recover goroutine中的panic 我们知道可以在代码中使用 recover 来会恢复程序中意想不到的 panic，而 panic 只会触发当前 goroutine 中的 defer 操作。 例如在下面的示例代码中，无法在 main 函数中 recover 另一个goroutine中引发的 panic。 func f1() { defer func() { if e := recover(); e != nil { fmt.Printf(&amp;#34;recover panic:%v\n&amp;#34;, e) } }() // 开启一个goroutine执行</description>
    </item>
    
    <item>
      <title>Go语言基础之指针</title>
      <link>http://shansec.github.io/post/%E5%9F%BA%E7%A1%80/Go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%8C%87%E9%92%88/</link>
      <pubDate>Sat, 20 Apr 2024 10:39:46 +0000</pubDate>
      
      <guid>http://shansec.github.io/post/%E5%9F%BA%E7%A1%80/Go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%8C%87%E9%92%88/</guid>
      <description>指针 任何程序数据载入内存后，在内存都有他们的地址，这就是指针。而为了保存一个数据在内存中的地址，我们就需要指针变量。 Go语言中的指针不能进行偏移和运算，因此Go语言中的指针操作非常简单，我们只需要记住两个符号：&amp;amp;（取地址）和*（根据地址取值）。 指针地址和指针类型 每个变量在</description>
    </item>
    
    <item>
      <title>Go语言基础之接口</title>
      <link>http://shansec.github.io/post/%E5%9F%BA%E7%A1%80/Go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%8E%A5%E5%8F%A3/</link>
      <pubDate>Sat, 20 Apr 2024 10:39:46 +0000</pubDate>
      
      <guid>http://shansec.github.io/post/%E5%9F%BA%E7%A1%80/Go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%8E%A5%E5%8F%A3/</guid>
      <description>接口 接口类型 接口是一种由程序员来定义的类型，一个接口类型就是一组方法的集合，它规定了需要实现的所有方法。 相较于使用结构体类型，当我们使用接口类型说明相比于它是什么更关心它能做什么。 接口的定义 每个接口类型由任意个方法签名组成，接口的定义格式如下： type 接口类型名 interface{ 方法名1( 参数列表1 )</description>
    </item>
    
    <item>
      <title>Go语言基础之数组</title>
      <link>http://shansec.github.io/post/%E5%9F%BA%E7%A1%80/Go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%95%B0%E7%BB%84/</link>
      <pubDate>Sat, 20 Apr 2024 10:39:46 +0000</pubDate>
      
      <guid>http://shansec.github.io/post/%E5%9F%BA%E7%A1%80/Go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%95%B0%E7%BB%84/</guid>
      <description>数组 数组是同一种数据类型元素的集合。 在Go语言中，数组从声明时就确定，使用时可以修改数组成员，但是数组大小不可变化。 基本语法： // 定义一个长度为3元素类型为int的数组a var a [3]int 数组定义 var 数组变量名 [元素数量]T 比如：var a [5]int， 数组的长度必须是常量，并且长度是数组类型的一</description>
    </item>
    
    <item>
      <title>Go语言基础之文件操作</title>
      <link>http://shansec.github.io/post/%E5%9F%BA%E7%A1%80/Go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Sat, 20 Apr 2024 10:39:46 +0000</pubDate>
      
      <guid>http://shansec.github.io/post/%E5%9F%BA%E7%A1%80/Go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</guid>
      <description>打开和关闭文件 os.Open()函数能够打开一个文件，返回一个*File和一个err。对得到的文件实例调用close()方法能够关闭文件。 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;os&amp;#34; ) func main() { // 只读方式打开当前目录下的main.go文件 file, err := os.Open(&amp;#34;./main.go&amp;#34;) if err != nil { fmt.Println(&amp;#34;open file failed!, err:&amp;#34;, err) return } // 关闭文件 file.Close() } 为了防止文件忘记关闭，我们通常使</description>
    </item>
    
    <item>
      <title>Go语言基础之泛型</title>
      <link>http://shansec.github.io/post/%E5%9F%BA%E7%A1%80/Go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%B3%9B%E5%9E%8B/</link>
      <pubDate>Sat, 20 Apr 2024 10:39:46 +0000</pubDate>
      
      <guid>http://shansec.github.io/post/%E5%9F%BA%E7%A1%80/Go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E4%B9%8B%E6%B3%9B%E5%9E%8B/</guid>
      <description>什么是泛型 泛型允许程序员在强类型程序设计语言中编写代码时使用一些以后才指定的类型，在实例化时作为参数指明这些类型。ーー换句话说，在编写某些代码或数据结构时先不提供值的类型，而是之后再提供。 泛型是一种独立于所使用的特定类型的编写代码的方法。使用泛型可以编写出适用于一组类型中的任何一</description>
    </item>
    
    <item>
      <title>Go语言基础之结构体</title>
      <link>http://shansec.github.io/post/%E5%9F%BA%E7%A1%80/Go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E4%B9%8B%E7%BB%93%E6%9E%84%E4%BD%93/</link>
      <pubDate>Sat, 20 Apr 2024 10:39:46 +0000</pubDate>
      
      <guid>http://shansec.github.io/post/%E5%9F%BA%E7%A1%80/Go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E4%B9%8B%E7%BB%93%E6%9E%84%E4%BD%93/</guid>
      <description>类型别名和自定义类型 自定义类型 在Go语言中有一些基本的数据类型，如string、整型、浮点型、布尔等数据类型， Go语言中可以使用 type 关键字来定义自定义类型。 自定义类型是定义了一个全新的类型。我们可以基于内置的基本类型定义，也可以通过struct定义。例如： //将MyInt定义为in</description>
    </item>
    
    <item>
      <title>Go语言基础之网络编程</title>
      <link>http://shansec.github.io/post/%E5%9F%BA%E7%A1%80/Go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E4%B9%8B%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</link>
      <pubDate>Sat, 20 Apr 2024 10:39:46 +0000</pubDate>
      
      <guid>http://shansec.github.io/post/%E5%9F%BA%E7%A1%80/Go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E4%B9%8B%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</guid>
      <description>互联网协议介绍 互联网的核心是一系列协议，总称为&amp;quot;互联网协议&amp;quot;（Internet Protocol Suite），正是这一些协议规定了电脑如何连接和组网。我们理解了这些协议，就理解了互联网的原理。由于这些协议太过庞大和复杂，没有办法在这里一概而全，只能介绍一下我们日常开发中接触较</description>
    </item>
    
    <item>
      <title>Go语言操作Redis</title>
      <link>http://shansec.github.io/post/%E6%95%B0%E6%8D%AE%E5%BA%93/Go%E8%AF%AD%E8%A8%80%E6%93%8D%E4%BD%9CRedis/</link>
      <pubDate>Sat, 20 Apr 2024 10:39:46 +0000</pubDate>
      
      <guid>http://shansec.github.io/post/%E6%95%B0%E6%8D%AE%E5%BA%93/Go%E8%AF%AD%E8%A8%80%E6%93%8D%E4%BD%9CRedis/</guid>
      <description>Redis 在项目开发中redis的使用也比较频繁，本文介绍了Go语言中go-redis库的基本使用。 Redis介绍 Redis是一个开源的内存数据库，Redis提供了多种不同类型的数据结构，很多业务场景下的问题都可以很自然地映射到这些数据结构上。除此之外，通过复制、持久化和客户端分片等特性</description>
    </item>
    
    <item>
      <title>Go语言标准库之context</title>
      <link>http://shansec.github.io/post/%E6%A0%87%E5%87%86%E5%BA%93/Go%E8%AF%AD%E8%A8%80%E6%A0%87%E5%87%86%E5%BA%93%E4%B9%8Bcontext/</link>
      <pubDate>Sat, 20 Apr 2024 10:39:46 +0000</pubDate>
      
      <guid>http://shansec.github.io/post/%E6%A0%87%E5%87%86%E5%BA%93/Go%E8%AF%AD%E8%A8%80%E6%A0%87%E5%87%86%E5%BA%93%E4%B9%8Bcontext/</guid>
      <description>为什么需要Context 基本示例 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;sync&amp;#34; &amp;#34;time&amp;#34; ) var wg sync.WaitGroup // 初始的例子 func worker() { for { fmt.Println(&amp;#34;worker&amp;#34;) time.Sleep(time.Second) } // 如何接收外部命令实现退出 wg.Done() } func main() { wg.Add(1) go worker() // 如何优雅的实现结束子goroutine wg.Wait() fmt.Println(&amp;#34;over&amp;#34;) } 全局变量方式 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;sync&amp;#34; &amp;#34;time&amp;#34; ) var wg sync.WaitGroup var exit bool // 全局变量方式存在的问题： // 1. 使用全局变量在跨包调用时不容易统一 // 2. 如</description>
    </item>
    
    <item>
      <title>Go语言标准库之flag</title>
      <link>http://shansec.github.io/post/%E6%A0%87%E5%87%86%E5%BA%93/Go%E8%AF%AD%E8%A8%80%E6%A0%87%E5%87%86%E5%BA%93%E4%B9%8Bflag/</link>
      <pubDate>Sat, 20 Apr 2024 10:39:46 +0000</pubDate>
      
      <guid>http://shansec.github.io/post/%E6%A0%87%E5%87%86%E5%BA%93/Go%E8%AF%AD%E8%A8%80%E6%A0%87%E5%87%86%E5%BA%93%E4%B9%8Bflag/</guid>
      <description>os.Args 如果你只是简单的想要获取命令行参数，可以像下面的代码示例一样使用os.Args来获取命令行参数。 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;os&amp;#34; ) //os.Args demo func main() { //os.Args是一个[]string if len(os.Args) &amp;gt; 0 { for index, arg := range os.Args { fmt.Printf(&amp;#34;args[%d]=%v\n&amp;#34;, index, arg) } } } 将上面的代码执行go build -o &amp;quot;args_demo&amp;quot;编译之后，执行：</description>
    </item>
    
    <item>
      <title>Go语言标准库之fmt与格式化占位符</title>
      <link>http://shansec.github.io/post/%E6%A0%87%E5%87%86%E5%BA%93/Go%E8%AF%AD%E8%A8%80%E6%A0%87%E5%87%86%E5%BA%93%E4%B9%8Bfmt%E4%B8%8E%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%8D%A0%E4%BD%8D%E7%AC%A6/</link>
      <pubDate>Sat, 20 Apr 2024 10:39:46 +0000</pubDate>
      
      <guid>http://shansec.github.io/post/%E6%A0%87%E5%87%86%E5%BA%93/Go%E8%AF%AD%E8%A8%80%E6%A0%87%E5%87%86%E5%BA%93%E4%B9%8Bfmt%E4%B8%8E%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%8D%A0%E4%BD%8D%E7%AC%A6/</guid>
      <description>fmt fmt包实现了类似C语言printf和scanf的格式化I/O。主要分为向外输出内容和获取输入内容两大部分。 向外输出 标准库fmt提供了以下几种输出相关函数。 Print Print系列函数会将内容输出到系统的标准输出，区别在于Print函数直接输出内容，Printf函数支持格式化输出字符串</description>
    </item>
    
    <item>
      <title>Go语言标准库之http&amp;template</title>
      <link>http://shansec.github.io/post/Web/Go%E8%AF%AD%E8%A8%80%E6%A0%87%E5%87%86%E5%BA%93%E4%B9%8Bhttptemplate/</link>
      <pubDate>Sat, 20 Apr 2024 10:39:46 +0000</pubDate>
      
      <guid>http://shansec.github.io/post/Web/Go%E8%AF%AD%E8%A8%80%E6%A0%87%E5%87%86%E5%BA%93%E4%B9%8Bhttptemplate/</guid>
      <description>html/template包实现了数据驱动的模板，用于生成可防止代码注入的安全的HTML内容。它提供了和text/template包相同的接口，Go语言中输出HTML的场景都应使用html/template这个包。 模板与渲染 在一些前后端不分离的Web架构中，我们通常需要在后端将一</description>
    </item>
    
    <item>
      <title>Go语言标准库之log</title>
      <link>http://shansec.github.io/post/%E6%A0%87%E5%87%86%E5%BA%93/Go%E8%AF%AD%E8%A8%80%E6%A0%87%E5%87%86%E5%BA%93%E4%B9%8Blog/</link>
      <pubDate>Sat, 20 Apr 2024 10:39:46 +0000</pubDate>
      
      <guid>http://shansec.github.io/post/%E6%A0%87%E5%87%86%E5%BA%93/Go%E8%AF%AD%E8%A8%80%E6%A0%87%E5%87%86%E5%BA%93%E4%B9%8Blog/</guid>
      <description>log Go语言内置的log包实现了简单的日志服务。本文介绍了标准库log的基本使用。 使用Logger log包定义了Logger类型，该类型提供了一些格式化输出的方法。本包也提供了一个预定义的“标准”logger，可以通过调用函数Print系列(Print|Printf|Println</description>
    </item>
    
    <item>
      <title>Go语言标准库之net&amp;http</title>
      <link>http://shansec.github.io/post/%E6%A0%87%E5%87%86%E5%BA%93/Go%E8%AF%AD%E8%A8%80%E6%A0%87%E5%87%86%E5%BA%93%E4%B9%8Bnethttp/</link>
      <pubDate>Sat, 20 Apr 2024 10:39:46 +0000</pubDate>
      
      <guid>http://shansec.github.io/post/%E6%A0%87%E5%87%86%E5%BA%93/Go%E8%AF%AD%E8%A8%80%E6%A0%87%E5%87%86%E5%BA%93%E4%B9%8Bnethttp/</guid>
      <description>net/http介绍 Go语言内置的net/http包提供了HTTP客户端和服务端的实现。 HTTP协议 超文本传输协议（HTTP，HyperText Transfer Protocol)是互联网上应用最为广泛的一种网络传输协议，所有的WWW文件都必须遵守这个标准。设计HTTP最初的目的是为了提供一种发</description>
    </item>
    
    <item>
      <title>Go语言标准库之strconv</title>
      <link>http://shansec.github.io/post/%E6%A0%87%E5%87%86%E5%BA%93/Go%E8%AF%AD%E8%A8%80%E6%A0%87%E5%87%86%E5%BA%93%E4%B9%8Bstrconv/</link>
      <pubDate>Sat, 20 Apr 2024 10:39:46 +0000</pubDate>
      
      <guid>http://shansec.github.io/post/%E6%A0%87%E5%87%86%E5%BA%93/Go%E8%AF%AD%E8%A8%80%E6%A0%87%E5%87%86%E5%BA%93%E4%B9%8Bstrconv/</guid>
      <description>strconv包 strconv包实现了基本数据类型与其字符串表示的转换，主要有以下常用函数： Atoi()、Itoa()、parse系列、format系列、append系列。 更多函数请查看官方文档。 string与int类型转换 这一组函数是我们平时编程中用的最多的。 Atoi() Atoi()函数</description>
    </item>
    
    <item>
      <title>Go语言标准库之time</title>
      <link>http://shansec.github.io/post/%E6%A0%87%E5%87%86%E5%BA%93/Go%E8%AF%AD%E8%A8%80%E6%A0%87%E5%87%86%E5%BA%93%E4%B9%8Btime/</link>
      <pubDate>Sat, 20 Apr 2024 10:39:46 +0000</pubDate>
      
      <guid>http://shansec.github.io/post/%E6%A0%87%E5%87%86%E5%BA%93/Go%E8%AF%AD%E8%A8%80%E6%A0%87%E5%87%86%E5%BA%93%E4%B9%8Btime/</guid>
      <description>time包 时间和日期是我们编程中经常会用到的，本文主要介绍了 Go 语言内置的 time 包的基本用法。time 包提供了一些关于时间显示和测量用的函数。time 包中日历的计算采用的是公历，不考虑润秒。 时间类型 Go 语言中使用time.Time类型表示时间。我们可以通过time.Now函数获取当前的时</description>
    </item>
    
    <item>
      <title>sqlx库使用指南</title>
      <link>http://shansec.github.io/post/%E6%95%B0%E6%8D%AE%E5%BA%93/sqlx%E5%BA%93%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</link>
      <pubDate>Sat, 20 Apr 2024 10:39:46 +0000</pubDate>
      
      <guid>http://shansec.github.io/post/%E6%95%B0%E6%8D%AE%E5%BA%93/sqlx%E5%BA%93%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</guid>
      <description>在项目中我们通常可能会使用database/sql连接MySQL数据库。本文借助使用sqlx实现批量插入数据的例子，介绍了sqlx中可能被你忽视了的sqlx.In和DB.NamedExec方法。 sqlx介绍 在项目中我们通常可能会使用database/sql连接MySQL数据库。s</description>
    </item>
    
    <item>
      <title>swagger生成接口文档</title>
      <link>http://shansec.github.io/post/Web/%E4%BD%BF%E7%94%A8swagger%E7%94%9F%E6%88%90%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/</link>
      <pubDate>Sat, 20 Apr 2024 10:39:46 +0000</pubDate>
      
      <guid>http://shansec.github.io/post/Web/%E4%BD%BF%E7%94%A8swagger%E7%94%9F%E6%88%90%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/</guid>
      <description>swagger生成接口文档 swagger介绍 Swagger本质上是一种用于描述使用JSON表示的RESTful API的接口描述语言。Swagger与一组开源软件工具一起使用，以设计、构建、记录和使用RESTful Web服务。Swagger包括自动文档，代码生成和测试用例生成。 在前</description>
    </item>
    
    <item>
      <title>validator库参数校验若干实用技巧</title>
      <link>http://shansec.github.io/post/Web/validator%E5%BA%93%E5%8F%82%E6%95%B0%E6%A0%A1%E9%AA%8C%E8%8B%A5%E5%B9%B2%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/</link>
      <pubDate>Sat, 20 Apr 2024 10:39:46 +0000</pubDate>
      
      <guid>http://shansec.github.io/post/Web/validator%E5%BA%93%E5%8F%82%E6%95%B0%E6%A0%A1%E9%AA%8C%E8%8B%A5%E5%B9%B2%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/</guid>
      <description>validator库参数校验若干实用技巧 在web开发中一个不可避免的环节就是对请求参数进行校验，通常我们会在代码中定义与请求参数相对应的模型（结构体），借助模型绑定快捷地解析请求中的参数，例如 gin 框架中的Bind和ShouldBind系列方法。本文就以 gin 框架的请求参数校验为例，介绍</description>
    </item>
    
    <item>
      <title>优雅地关机</title>
      <link>http://shansec.github.io/post/Web/%E4%BC%98%E9%9B%85%E5%9C%B0%E5%85%B3%E6%9C%BA%E6%88%96%E9%87%8D%E5%90%AF/</link>
      <pubDate>Sat, 20 Apr 2024 10:39:46 +0000</pubDate>
      
      <guid>http://shansec.github.io/post/Web/%E4%BC%98%E9%9B%85%E5%9C%B0%E5%85%B3%E6%9C%BA%E6%88%96%E9%87%8D%E5%90%AF/</guid>
      <description>优雅地关机 什么是优雅关机？ 优雅关机就是服务端关机命令发出后不是立即关机，而是等待当前还在处理的请求全部处理完毕后再退出程序，是一种对客户端友好的关机方式。而执行Ctrl+C关闭服务端时，会强制结束进程导致正在访问的请求出现问题。 如何实现优雅关机？ Go 1.8版本之后， http.Server 内置的 Shutdown() 方法就</description>
    </item>
    
    <item>
      <title>使用Air实现Go程序实时热重载</title>
      <link>http://shansec.github.io/post/Web/%E4%BD%BF%E7%94%A8Air%E5%AE%9E%E7%8E%B0Go%E7%A8%8B%E5%BA%8F%E5%AE%9E%E6%97%B6%E7%83%AD%E9%87%8D%E8%BD%BD/</link>
      <pubDate>Sat, 20 Apr 2024 10:39:46 +0000</pubDate>
      
      <guid>http://shansec.github.io/post/Web/%E4%BD%BF%E7%94%A8Air%E5%AE%9E%E7%8E%B0Go%E7%A8%8B%E5%BA%8F%E5%AE%9E%E6%97%B6%E7%83%AD%E9%87%8D%E8%BD%BD/</guid>
      <description>为什么需要实时加载？ 之前使用Python编写Web项目的时候，常见的Flask或Django框架都是支持实时加载的，你修改了项目代码之后，程序能够自动重新加载并执行（live-reload），这在日常的开发阶段是十分方便的。 在使用Go语言的gin框架在本地做开发调试的时候，经常需</description>
    </item>
    
    <item>
      <title>使用sqlx批量插入数据的若干方法</title>
      <link>http://shansec.github.io/post/%E6%95%B0%E6%8D%AE%E5%BA%93/%E4%BD%BF%E7%94%A8sqlx%E6%89%B9%E9%87%8F%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE%E7%9A%84%E8%8B%A5%E5%B9%B2%E6%96%B9%E6%B3%95/</link>
      <pubDate>Sat, 20 Apr 2024 10:39:46 +0000</pubDate>
      
      <guid>http://shansec.github.io/post/%E6%95%B0%E6%8D%AE%E5%BA%93/%E4%BD%BF%E7%94%A8sqlx%E6%89%B9%E9%87%8F%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE%E7%9A%84%E8%8B%A5%E5%B9%B2%E6%96%B9%E6%B3%95/</guid>
      <description>在项目中我们通常可能会使用database/sql连接MySQL数据库。本文借助使用sqlx实现批量插入数据的例子，介绍了sqlx中可能被你忽视了的sqlx.In和DB.NamedExec方法。 在项目中我们通常可能会使用database/sql连接MySQL数据库。sqlx可以认</description>
    </item>
    
    <item>
      <title>使用zap接收gin框架默认的日志并配置日志归档</title>
      <link>http://shansec.github.io/post/Web/%E4%BD%BF%E7%94%A8zap%E6%8E%A5%E6%94%B6gin%E6%A1%86%E6%9E%B6%E9%BB%98%E8%AE%A4%E7%9A%84%E6%97%A5%E5%BF%97%E5%B9%B6%E9%85%8D%E7%BD%AE%E6%97%A5%E5%BF%97%E5%BD%92%E6%A1%A3/</link>
      <pubDate>Sat, 20 Apr 2024 10:39:46 +0000</pubDate>
      
      <guid>http://shansec.github.io/post/Web/%E4%BD%BF%E7%94%A8zap%E6%8E%A5%E6%94%B6gin%E6%A1%86%E6%9E%B6%E9%BB%98%E8%AE%A4%E7%9A%84%E6%97%A5%E5%BF%97%E5%B9%B6%E9%85%8D%E7%BD%AE%E6%97%A5%E5%BF%97%E5%BD%92%E6%A1%A3/</guid>
      <description>gin默认的中间件 首先我们来看一个最简单的gin项目： func main() { r := gin.Default() r.GET(&amp;#34;/hello&amp;#34;, func(c *gin.Context) { c.String(&amp;#34;hello liwenzhou.com!&amp;#34;) }) r.Run( } 接下来我们看一下gin.Default()的源码： func Default() *Engine { debugPrintWARNINGDefault() engine := New() engine.Use(Logger(), Recovery()) return engine } 也就是我们在使用gin.Default()的同时是用到了gin框架内的两个默认中间件Logger()和Recovery(</description>
    </item>
    
    <item>
      <title>在gin框架中使用JWT</title>
      <link>http://shansec.github.io/post/Web/%E5%9C%A8gin%E6%A1%86%E6%9E%B6%E4%B8%AD%E4%BD%BF%E7%94%A8JWT/</link>
      <pubDate>Sat, 20 Apr 2024 10:39:46 +0000</pubDate>
      
      <guid>http://shansec.github.io/post/Web/%E5%9C%A8gin%E6%A1%86%E6%9E%B6%E4%B8%AD%E4%BD%BF%E7%94%A8JWT/</guid>
      <description>JWT全称JSON Web Token是一种跨域认证解决方案，属于一个开放的标准，它规定了一种Token实现方式，目前多用于前后端分离项目和OAuth2.0业务场景下。 什么是JWT？ JWT全称JSON Web Token是一种跨域认证解决方案，属于一个开放的标准，它规定了一种Token 实现方式，</description>
    </item>
    
    <item>
      <title>如何使用Docker部署Go Web应用</title>
      <link>http://shansec.github.io/post/Web/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Docker%E9%83%A8%E7%BD%B2Go-Web%E5%BA%94%E7%94%A8/</link>
      <pubDate>Sat, 20 Apr 2024 10:39:46 +0000</pubDate>
      
      <guid>http://shansec.github.io/post/Web/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Docker%E9%83%A8%E7%BD%B2Go-Web%E5%BA%94%E7%94%A8/</guid>
      <description>为什么需要Docker？ 使用docker的主要目标是容器化。也就是为你的应用程序提供一致的环境，而不依赖于它运行的主机。 想象一下你是否也会遇到下面这个场景，你在本地开发了你的应用程序，它很可能有很多的依赖环境或包，甚至对依赖的具体版本都有严格的要求，当开发过程完成后，你希望将应用</description>
    </item>
    
    <item>
      <title>常用的HTTP服务压测工具介绍</title>
      <link>http://shansec.github.io/post/Web/%E5%B8%B8%E7%94%A8%E7%9A%84HTTP%E6%9C%8D%E5%8A%A1%E5%8E%8B%E6%B5%8B%E5%B7%A5%E5%85%B7%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Sat, 20 Apr 2024 10:39:46 +0000</pubDate>
      
      <guid>http://shansec.github.io/post/Web/%E5%B8%B8%E7%94%A8%E7%9A%84HTTP%E6%9C%8D%E5%8A%A1%E5%8E%8B%E6%B5%8B%E5%B7%A5%E5%85%B7%E4%BB%8B%E7%BB%8D/</guid>
      <description>HTTP服务压力测试工具 在项目正式上线之前，我们通常需要通过压测来评估当前系统能够支撑的请求量、排查可能存在的隐藏bug，同时了解了程序的实际处理能力能够帮我们更好的匹配项目的实际需求，节约资源成本。 压测相关术语 响应时间(RT) ：指系统对请求作出响应的时间. 吞吐量(Through</description>
    </item>
    
    <item>
      <title>常用限流策略——漏桶与令牌桶介绍</title>
      <link>http://shansec.github.io/post/Web/%E5%B8%B8%E7%94%A8%E9%99%90%E6%B5%81%E7%AD%96%E7%95%A5%E6%BC%8F%E6%A1%B6%E4%B8%8E%E4%BB%A4%E7%89%8C%E6%A1%B6%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Sat, 20 Apr 2024 10:39:46 +0000</pubDate>
      
      <guid>http://shansec.github.io/post/Web/%E5%B8%B8%E7%94%A8%E9%99%90%E6%B5%81%E7%AD%96%E7%95%A5%E6%BC%8F%E6%A1%B6%E4%B8%8E%E4%BB%A4%E7%89%8C%E6%A1%B6%E4%BB%8B%E7%BB%8D/</guid>
      <description>限流又称为流量控制（流控），通常是指限制到达系统的并发请求数，本文列举了常见的限流策略，并以gin框架为例演示了如何为项目添加限流组件。 限流 限流又称为流量控制（流控），通常是指限制到达系统的并发请求数。 我们生活中也会经常遇到限流的场景，比如：某景区限制每日进入景区的游客数量为8万</description>
    </item>
    
    <item>
      <title>部署Go语言项目</title>
      <link>http://shansec.github.io/post/Web/%E9%83%A8%E7%BD%B2Go%E8%AF%AD%E8%A8%80%E9%A1%B9%E7%9B%AE%E7%9A%84-N-%E7%A7%8D%E6%96%B9%E6%B3%95/</link>
      <pubDate>Sat, 20 Apr 2024 10:39:46 +0000</pubDate>
      
      <guid>http://shansec.github.io/post/Web/%E9%83%A8%E7%BD%B2Go%E8%AF%AD%E8%A8%80%E9%A1%B9%E7%9B%AE%E7%9A%84-N-%E7%A7%8D%E6%96%B9%E6%B3%95/</guid>
      <description>部署Go语言项目 本文以部署 Go Web 程序为例，介绍了在 CentOS7 服务器上部署 Go 语言程序的若干方法。 独立部署 Go 语言支持跨平台交叉编译，也就是说我们可以在 Windows 或 Mac 平台下编写代码，并且将代码编译成能够在 Linux amd64 服务器上运行的程序。 对于简单的项目，通常我们只需要将编译后的二进制文件拷贝到服务器上，然后设置为</description>
    </item>
    
    <item>
      <title>浏览器是如何渲染页面的？</title>
      <link>http://shansec.github.io/post/blog/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%AF%E5%A6%82%E4%BD%95%E6%B8%B2%E6%9F%93%E9%A1%B5%E9%9D%A2%E7%9A%84/</link>
      <pubDate>Wed, 10 May 2023 17:33:43 +0000</pubDate>
      
      <guid>http://shansec.github.io/post/blog/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%AF%E5%A6%82%E4%BD%95%E6%B8%B2%E6%9F%93%E9%A1%B5%E9%9D%A2%E7%9A%84/</guid>
      <description>当浏览器的网络线程收到 HTML 文档后，会产生一个渲染任务，并将其传递给渲染主线程的消息队列。在事件循环机制的作用下，渲染主线程取出消息队列中的渲染任务，开启渲染流程。 整个渲染流程分为多个阶段，分别是： HTML 解析、样式计算、布局、分层、绘制、分块、光栅化、画。每个阶段都有明确的输入输出，上一</description>
    </item>
    
    <item>
      <title>CSS属性计算过程</title>
      <link>http://shansec.github.io/post/blog/CSS%E5%B1%9E%E6%80%A7%E8%AE%A1%E7%AE%97%E8%BF%87%E7%A8%8B/</link>
      <pubDate>Wed, 10 May 2023 16:58:13 +0000</pubDate>
      
      <guid>http://shansec.github.io/post/blog/CSS%E5%B1%9E%E6%80%A7%E8%AE%A1%E7%AE%97%E8%BF%87%E7%A8%8B/</guid>
      <description>CSS 属性计算过程 你是否了解 CSS 的属性计算过程呢？ 有的同学可能会讲，CSS属性我倒是知道，例如： p{ color : red; } 上面的 CSS 代码中，p 是元素选择器，color 就是其中的一个 CSS 属性。 但是要说 CSS 属性的计算过程，还真的不是很清楚。 没关系，通过此篇文章，能够让你彻底明白什么是 CSS 属性的计算流程。 首先，不知</description>
    </item>
    
    <item>
      <title>微信小程序中判断用户是否已关注公众号的两种实现</title>
      <link>http://shansec.github.io/post/blog/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B8%AD%E5%88%A4%E6%96%AD%E7%94%A8%E6%88%B7%E6%98%AF%E5%90%A6%E5%B7%B2%E5%85%B3%E6%B3%A8%E5%85%AC%E4%BC%97%E5%8F%B7%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Sat, 06 May 2023 14:27:30 +0000</pubDate>
      
      <guid>http://shansec.github.io/post/blog/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B8%AD%E5%88%A4%E6%96%AD%E7%94%A8%E6%88%B7%E6%98%AF%E5%90%A6%E5%B7%B2%E5%85%B3%E6%B3%A8%E5%85%AC%E4%BC%97%E5%8F%B7%E7%9A%84%E4%B8%A4%E7%A7%8D%E5%AE%9E%E7%8E%B0/</guid>
      <description>背景： 最近的一个小程序项目中有这么一个需求：进入我的主页后, 如果用户没有关注过我们的公众号, 则展示一个引导关注公众号组件, 点击后跳转到一篇公众号文章, 指引用户进行关注，用户完成关注隐藏该组件。 方式一(前后端参与)： 由于对微信的UnionID机制一知半解（知道用户在同一个开放平台下</description>
    </item>
    
    <item>
      <title>Vue.js中 watch 的高级用法</title>
      <link>http://shansec.github.io/post/blog/Vue.js%E4%B8%AD-watch-%E7%9A%84%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95/</link>
      <pubDate>Thu, 04 May 2023 16:34:54 +0000</pubDate>
      
      <guid>http://shansec.github.io/post/blog/Vue.js%E4%B8%AD-watch-%E7%9A%84%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95/</guid>
      <description>&amp;lt;div&amp;gt; &amp;lt;p&amp;gt;FullName: {{fullName}}&amp;lt;/p&amp;gt; &amp;lt;p&amp;gt;FirstName: &amp;lt;input type=&amp;#34;text&amp;#34; v-model=&amp;#34;firstName&amp;#34;&amp;gt;&amp;lt;/p&amp;gt; &amp;lt;/div&amp;gt; new Vue({ el: &amp;#39;#root&amp;#39;, data: { firstName: &amp;#39;Dawei&amp;#39;, lastName: &amp;#39;Lou&amp;#39;, fullName: &amp;#39;&amp;#39; }, watch: { firstName(newName, oldName) { this.fullName = newName + &amp;#39; &amp;#39; + this.lastName; } } }) 上面的代码的效果是，当我们输入firstName后，wacth监听每次修改变化的新值，然后计算输出fullName。 handler方法和immediate属性 这里 watch 的一个特点是，最初绑定的时候是不会执行的，</description>
    </item>
    
    <item>
      <title>Vue3 Composition API: 对比ref和reactive</title>
      <link>http://shansec.github.io/post/blog/Vue3-Composition-API-%E5%AF%B9%E6%AF%94ref%E5%92%8Creactive/</link>
      <pubDate>Thu, 04 May 2023 11:13:30 +0000</pubDate>
      
      <guid>http://shansec.github.io/post/blog/Vue3-Composition-API-%E5%AF%B9%E6%AF%94ref%E5%92%8Creactive/</guid>
      <description>Vue2 回顾 首先回顾一下在Vue2中我们是如何创建一个响应式数据 (reactive data)的： Vue3新特性 ref的使用 而在Vue3中，我们可以用Composition API: ref 来改写上述代码： ref 的作用就是将一个原始数据类型（primitive data type）转换成一个带有响应式类型 的数据类型，原始数据类型共</description>
    </item>
    
    <item>
      <title>微信小程序全局变量监听</title>
      <link>http://shansec.github.io/post/blog/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E7%9B%91%E5%90%AC/</link>
      <pubDate>Wed, 26 Apr 2023 10:23:34 +0000</pubDate>
      
      <guid>http://shansec.github.io/post/blog/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E7%9B%91%E5%90%AC/</guid>
      <description>需求：在任意一个页面上实时监听全局变量发生的改变。 第一步 新建 utils 文件夹，并在文件夹中新建 onEvent.js 文件。 var events = {}; function on(name, self, callback) { var tuple = [self, callback]; var callbacks = events[name]; if (Array.isArray(callbacks)) { callbacks.push(tuple); } else { events[name] = [tuple]; } } function remove(name, self) { var callbacks = events[name]; if (Array.isArray(callbacks)) { events[name] = callbacks.filter((tuple) =&amp;gt; { return tuple[0] != self; }) } } function emit(name, data) { var callbacks = events[name]; if (Array.isArray(callbacks)) { callbacks.map((tuple) =&amp;gt; { var self = tuple[0]; var callback = tuple[1]; callback.call(self, data); }) } } exports.on = on; exports.remove = remove; exports.emit = emit; 第二步 在</description>
    </item>
    
    <item>
      <title>JavaScript 中如何判断变量是否为数字</title>
      <link>http://shansec.github.io/post/blog/JavaScript-%E4%B8%AD%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD%E5%8F%98%E9%87%8F%E6%98%AF%E5%90%A6%E4%B8%BA%E6%95%B0%E5%AD%97/</link>
      <pubDate>Fri, 14 Apr 2023 10:33:36 +0000</pubDate>
      
      <guid>http://shansec.github.io/post/blog/JavaScript-%E4%B8%AD%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD%E5%8F%98%E9%87%8F%E6%98%AF%E5%90%A6%E4%B8%BA%E6%95%B0%E5%AD%97/</guid>
      <description>简介 JavaScript 是一种动态类型语言，这意味着解释器在运行时确定变量的类型。实际上，这也允许我们在相同的代码中使用相同的变量来存储不同类型的数据。如果没有文档和一致性，我们在使用代码时并不总是知道变量的类型。 当我们期望一个变量是数字时，对字符串或数组进行操作可能会在代码中导致奇怪的结果。在本</description>
    </item>
    
    <item>
      <title>Vue3开发踩坑</title>
      <link>http://shansec.github.io/post/blog/Vue3%E5%BC%80%E5%8F%91%E8%B8%A9%E5%9D%91/</link>
      <pubDate>Fri, 24 Mar 2023 09:45:47 +0000</pubDate>
      
      <guid>http://shansec.github.io/post/blog/Vue3%E5%BC%80%E5%8F%91%E8%B8%A9%E5%9D%91/</guid>
      <description>期待了很久的vue3，一发布就上手体验了一把，这里记录几个自己碰到的网上不常见的小坑~ 自定义全局参数 定义： // main.js const app = createApp(App) app.config.globalProperties.$test = &amp;#39;test&amp;#39; 除了setup()需要先获得实例，其他地方可以直接通过$test使用： &amp;lt;tempalte&amp;gt; &amp;lt;div&amp;gt;{{ $test }}&amp;lt;/div&amp;gt; &amp;lt;/tempalte&amp;gt; &amp;lt;script&amp;gt; import { getCurrentInstance } from &amp;#39;vue&amp;#39; export default { setup() { const test = getCurrentInstance()?.appContext.config.globalProperties.$test console.log(&amp;#39;test===&amp;#39;) console.log(test) }, } &amp;lt;/script&amp;gt; Vite通过alias别名引用 在w</description>
    </item>
    
    <item>
      <title>史上最全面、最详细的Cookie总结</title>
      <link>http://shansec.github.io/post/blog/%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%85%A8%E9%9D%A2%E6%9C%80%E8%AF%A6%E7%BB%86%E7%9A%84Cookie%E6%80%BB%E7%BB%93/</link>
      <pubDate>Fri, 24 Mar 2023 09:42:22 +0000</pubDate>
      
      <guid>http://shansec.github.io/post/blog/%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%85%A8%E9%9D%A2%E6%9C%80%E8%AF%A6%E7%BB%86%E7%9A%84Cookie%E6%80%BB%E7%BB%93/</guid>
      <description>1. Cookie 产生的背景 我们都知道，HTTP 协议是无状态的，服务器无法知道两个请求是否来自同一个浏览器，也不知道用户上一次做了什么，每次请求都是完全相互独立，这严重阻碍了交互式 Web 应用程序的实现。例如： 购物车：在典型的网上购物场景中，用户浏览了几个页面，买了一盒饼干和两瓶饮料。最后结帐时，由</description>
    </item>
    
    <item>
      <title>浏览器输入URL后都发生了什么？？</title>
      <link>http://shansec.github.io/post/blog/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BE%93%E5%85%A5URL%E5%90%8E%E9%83%BD%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/</link>
      <pubDate>Fri, 24 Mar 2023 09:35:08 +0000</pubDate>
      
      <guid>http://shansec.github.io/post/blog/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BE%93%E5%85%A5URL%E5%90%8E%E9%83%BD%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/</guid>
      <description>DNS 域名解析 在网络世界，你肯定记得住网站的名称，但是很难记住网站的 IP 地址，因而也需要一个地址簿，就是 DNS 服务器。DNS 服务器是高可用、高并发和分布式的，它是树状结构，如图： 根 DNS 服务器 ：返回顶级域 DNS 服务器的 IP 地址 顶级域 DNS 服务器：返回权威 DNS 服务器的 IP 地址 权威 DNS 服务器 ：返回相应主机的 IP 地址</description>
    </item>
    
    <item>
      <title>微信小程序自定义顶部状态栏</title>
      <link>http://shansec.github.io/post/blog/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%87%AA%E5%AE%9A%E4%B9%89%E9%A1%B6%E9%83%A8%E7%8A%B6%E6%80%81%E6%A0%8F/</link>
      <pubDate>Wed, 22 Mar 2023 10:47:12 +0000</pubDate>
      
      <guid>http://shansec.github.io/post/blog/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%87%AA%E5%AE%9A%E4%B9%89%E9%A1%B6%E9%83%A8%E7%8A%B6%E6%80%81%E6%A0%8F/</guid>
      <description>因为工作需要，要在微信小程序中自定义顶部导航栏，通过这篇文章来记录一下自己所得~ 第一步: 需要在json文件中配置&amp;quot;navigation&amp;quot; : &amp;quot;custom&amp;quot;，完成自定义导航栏，只保留胶囊按钮，效果如下图： 做完以上步骤，基本上就可以自定义导航栏</description>
    </item>
    
    <item>
      <title>微信小程序picker组件遇到的问题以及解决办法</title>
      <link>http://shansec.github.io/post/blog/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8Fpicker%E7%BB%84%E4%BB%B6%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E4%BB%A5%E5%8F%8A%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</link>
      <pubDate>Wed, 22 Mar 2023 10:45:38 +0000</pubDate>
      
      <guid>http://shansec.github.io/post/blog/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8Fpicker%E7%BB%84%E4%BB%B6%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E4%BB%A5%E5%8F%8A%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</guid>
      <description>一、picker基本概念 先来看一下官方文档中picker的基本概念： 从底部弹起的滚动选择器，现支持三种选择器，通过mode来区分，分别是普通选择器，时间选择器，日期选择器，默认是普通选择器。 重要属性 range： 选取范围，数据类型为Array / Object Array，mode为 普通选择器 时，</description>
    </item>
    
    <item>
      <title>微信小程序自定义tabbar栏【中间突出样式】</title>
      <link>http://shansec.github.io/post/blog/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%87%AA%E5%AE%9A%E4%B9%89tabbar%E6%A0%8F%E4%B8%AD%E9%97%B4%E7%AA%81%E5%87%BA%E6%A0%B7%E5%BC%8F/</link>
      <pubDate>Wed, 22 Mar 2023 10:43:59 +0000</pubDate>
      
      <guid>http://shansec.github.io/post/blog/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%87%AA%E5%AE%9A%E4%B9%89tabbar%E6%A0%8F%E4%B8%AD%E9%97%B4%E7%AA%81%E5%87%BA%E6%A0%B7%E5%BC%8F/</guid>
      <description>前言 昨天主管突然给我说微信小程序默认的 tabBar 不美观，让我改成中间突出的那种样式。纵然我心里面有千般不情愿，但还是接下了这个任务。查了一下文档 自定义 tabBar 发现有这个方法，有思路了就赶紧搞起来，以下是我的开发经验分享。 一、自定义tabbar栏 配置 在 app.json 文件中的 tabBar 中指定 custom 字段为 true（意思是允</description>
    </item>
    
    <item>
      <title>谈谈我对 path.resolve 的理解</title>
      <link>http://shansec.github.io/post/blog/%E8%B0%88%E8%B0%88%E6%88%91%E5%AF%B9path-resolve%E7%9A%84%E7%90%86%E8%A7%A3/</link>
      <pubDate>Wed, 22 Mar 2023 10:39:46 +0000</pubDate>
      
      <guid>http://shansec.github.io/post/blog/%E8%B0%88%E8%B0%88%E6%88%91%E5%AF%B9path-resolve%E7%9A%84%E7%90%86%E8%A7%A3/</guid>
      <description>前言 前一段时间在阅读源码的时候，遇到了path.resolve()，经过请教，终于知道了这个方法的作用。这边文章用来记录自己的使用心得。 正文 path.resolve() 作用：path.resolve() 该方法将一些的 路径/路径段 解析为绝对路径。 语法：path.resolve( [from…],to )。 说明：</description>
    </item>
    
    <item>
      <title>七个 Vue 项目用得上的 JavaScript 库分享</title>
      <link>http://shansec.github.io/post/blog/%E4%B8%83%E4%B8%AA-Vue-%E9%A1%B9%E7%9B%AE%E7%94%A8%E5%BE%97%E4%B8%8A%E7%9A%84-JavaScript-%E5%BA%93%E5%88%86%E4%BA%AB/</link>
      <pubDate>Wed, 22 Mar 2023 10:37:34 +0000</pubDate>
      
      <guid>http://shansec.github.io/post/blog/%E4%B8%83%E4%B8%AA-Vue-%E9%A1%B9%E7%9B%AE%E7%94%A8%E5%BE%97%E4%B8%8A%E7%9A%84-JavaScript-%E5%BA%93%E5%88%86%E4%BA%AB/</guid>
      <description>前言 借助开源库加速 Vue 项目的开发进度是现代前端开发比较常见的方式，平常收集一些 JavaScript 库介绍，在遇到需要的时候可以信手拈来。Vue 生态有很多不错的依赖库或者组件，是使用 Vue 开发前端的原因之一。接下来将会介绍七个 Vue 项目中会用到的 JavaScript 库。 一、vueuse 这是 GitHub 上星最多的库之一，拥有超过 12.8k 颗星，这</description>
    </item>
    
    <item>
      <title>从Vue2 到 Vue3，这些路由差异你需要掌握！</title>
      <link>http://shansec.github.io/post/blog/%E4%BB%8EVue2-%E5%88%B0-Vue3%E8%BF%99%E4%BA%9B%E8%B7%AF%E7%94%B1%E5%B7%AE%E5%BC%82%E4%BD%A0%E9%9C%80%E8%A6%81%E6%8E%8C%E6%8F%A1/</link>
      <pubDate>Wed, 22 Mar 2023 10:37:34 +0000</pubDate>
      
      <guid>http://shansec.github.io/post/blog/%E4%BB%8EVue2-%E5%88%B0-Vue3%E8%BF%99%E4%BA%9B%E8%B7%AF%E7%94%B1%E5%B7%AE%E5%BC%82%E4%BD%A0%E9%9C%80%E8%A6%81%E6%8E%8C%E6%8F%A1/</guid>
      <description>前言 Vue3 已经出来很长时间了，但对 Vue3 的路由却了解的非常少，甚至只知道最基本的跳转和参数获取，这些技能处理一些复杂的功能是不够的，最近把 Vue3 的路由版本差异给学习了一下，在这里把结果分享给大家！！！ 一、导航守卫 全局前置守卫 全局前置守卫通常用来做权限控制，使用 router.beforeEach 即可添加： const router = createRouter({...}) router.beforeEach((to, from) =&amp;gt; { // ...</description>
    </item>
    
    <item>
      <title>盘点一些惊艳一时的 CSS 属性</title>
      <link>http://shansec.github.io/post/blog/%E7%9B%98%E7%82%B9%E4%B8%80%E4%BA%9B%E6%83%8A%E8%89%B3%E4%B8%80%E6%97%B6%E7%9A%84-CSS-%E5%B1%9E%E6%80%A7/</link>
      <pubDate>Wed, 22 Mar 2023 10:28:10 +0000</pubDate>
      
      <guid>http://shansec.github.io/post/blog/%E7%9B%98%E7%82%B9%E4%B8%80%E4%BA%9B%E6%83%8A%E8%89%B3%E4%B8%80%E6%97%B6%E7%9A%84-CSS-%E5%B1%9E%E6%80%A7/</guid>
      <description>前言 随着前端的不断发展，更多新的 CSS 属性不断加入提案，本文列举 5 个不常用但很有用且你见过也可能没见过的 CSS 属性，带大家领略 CSS 之美。 一、position: sticky 不知道大家平时业务开发中有没有碰到这样的需求：标题在滚动的时候，会一直贴着最顶上。这种场景实际上很多：比如表格的标题栏、网站的导航</description>
    </item>
    
    <item>
      <title>Pinia食用指南</title>
      <link>http://shansec.github.io/post/blog/Pinia%E9%A3%9F%E7%94%A8%E6%8C%87%E5%8D%97/</link>
      <pubDate>Mon, 20 Mar 2023 14:24:21 +0000</pubDate>
      
      <guid>http://shansec.github.io/post/blog/Pinia%E9%A3%9F%E7%94%A8%E6%8C%87%E5%8D%97/</guid>
      <description>前言 Pinia ，发音为 /piːnjʌ/，来源于西班牙语 piña 。意思为菠萝，表示与菠萝一样，由很多小块组成。在 Pinia 中，每个 Store 都是单独存在，一同进行状态管理。与 Vuex 相比，Pinia 提供了更简单的 API，更少的规范，以及 Composition-API 风格的 API 。更重要的是，与 TypeScript 一起使用具有可靠的类型推断支持。 Pinia与Vu</description>
    </item>
    
    <item>
      <title>package.json配置解读</title>
      <link>http://shansec.github.io/post/blog/package-json%E9%85%8D%E7%BD%AE%E8%A7%A3%E8%AF%BB/</link>
      <pubDate>Mon, 20 Mar 2023 14:21:54 +0000</pubDate>
      
      <guid>http://shansec.github.io/post/blog/package-json%E9%85%8D%E7%BD%AE%E8%A7%A3%E8%AF%BB/</guid>
      <description>前言 package.json是每个前端项目都会有的json文件，位于项目的根目录中。很多脚手架在创建项目的时候会帮我们自动初始化好 package.json。package.json有许多配置与项目息息相关，了解他们有助于对项目的开发，接下来让我们开始了解package.json的</description>
    </item>
    
    <item>
      <title>何为 Vue3 组件标注 TS 类型，看这篇文章就够了！</title>
      <link>http://shansec.github.io/post/blog/%E5%A6%82%E4%BD%95%E4%B8%BA-Vue3-%E7%BB%84%E4%BB%B6%E6%A0%87%E6%B3%A8-TS-%E7%B1%BB%E5%9E%8B%E7%9C%8B%E8%BF%99%E7%AF%87%E6%96%87%E7%AB%A0%E5%B0%B1%E5%A4%9F%E4%BA%86/</link>
      <pubDate>Mon, 20 Mar 2023 14:15:59 +0000</pubDate>
      
      <guid>http://shansec.github.io/post/blog/%E5%A6%82%E4%BD%95%E4%B8%BA-Vue3-%E7%BB%84%E4%BB%B6%E6%A0%87%E6%B3%A8-TS-%E7%B1%BB%E5%9E%8B%E7%9C%8B%E8%BF%99%E7%AF%87%E6%96%87%E7%AB%A0%E5%B0%B1%E5%A4%9F%E4%BA%86/</guid>
      <description>前言 要说今年最热门的前端技术，Vue3 和 TS 绝对榜上有名了。今天就给大家分享一下如何在 Vue3 组件中结合 Composition-Api 使用 TS 类型。如果有不会或者不熟的小伙伴，一起学起来吧！ 一、为 props 标注类型 使用 &amp;lt; script setup &amp;gt; 当使用 &amp;lt; script setup &amp;gt; 时，defineProps() 宏函数支持从它的参数中推导类型： 这被称为 运行时声明 ，因为</description>
    </item>
    
    <item>
      <title>助你从Vue2过渡到Vue3的常见使用场景</title>
      <link>http://shansec.github.io/post/blog/%E5%8A%A9%E4%BD%A0%E4%BB%8EVue2%E8%BF%87%E6%B8%A1%E5%88%B0Vue3%E7%9A%84%E5%B8%B8%E8%A7%81%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/</link>
      <pubDate>Mon, 20 Mar 2023 14:11:12 +0000</pubDate>
      
      <guid>http://shansec.github.io/post/blog/%E5%8A%A9%E4%BD%A0%E4%BB%8EVue2%E8%BF%87%E6%B8%A1%E5%88%B0Vue3%E7%9A%84%E5%B8%B8%E8%A7%81%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/</guid>
      <description>前言 相信有很多人已经学习了 Vue3 的 API 和 新特性，但是令人头疼的是工作中依然使用的是 Vue2，也不知道自己的水平能否上手 Vue3 项目，今天把实践过程中常见使用场景分享给大家，希望对你们有所帮助。 场景一：父子组件数据传递 父组件数据传递到子组件 Vue3 中父组件同样是通过属性传递数据，但子组件接受数据的方</description>
    </item>
    
    <item>
      <title>Vue3中操作dom的四种方式，建议收藏！！！</title>
      <link>http://shansec.github.io/post/blog/Vue3%E4%B8%AD%E6%93%8D%E4%BD%9Cdom%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%96%B9%E5%BC%8F%E5%BB%BA%E8%AE%AE%E6%94%B6%E8%97%8F/</link>
      <pubDate>Mon, 20 Mar 2023 14:09:39 +0000</pubDate>
      
      <guid>http://shansec.github.io/post/blog/Vue3%E4%B8%AD%E6%93%8D%E4%BD%9Cdom%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%96%B9%E5%BC%8F%E5%BB%BA%E8%AE%AE%E6%94%B6%E8%97%8F/</guid>
      <description>前言 最近主管提出了许多优化用户体验的要求，其中很多涉及 dom 操作。本文将 Vue3 中常见的 dom 操作总结了一下。觉得文章不错、或对自己开发有所帮助，欢迎点赞收藏！ 一、通过 ref 拿到 dom 的引用 &amp;lt;template&amp;gt; &amp;lt;div class=&amp;#34;ref-container&amp;#34;&amp;gt; &amp;lt;div ref=&amp;#34;sectionRef&amp;#34; class=&amp;#34;ref-section&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/template&amp;gt; &amp;lt;script lang=&amp;#34;ts&amp;#34; setup&amp;gt; import { ref } from &amp;#39;vue&amp;#39; const sectionRef = ref() &amp;lt;/script&amp;gt; 通过对 div 元素添加 ref 属性，为了获取到这个元素，我们声明了一个与 ref 属性名</description>
    </item>
    
    <item>
      <title>Vue 项目如何实现一个全局菜单搜索框</title>
      <link>http://shansec.github.io/post/blog/Vue-%E9%A1%B9%E7%9B%AE%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%85%A8%E5%B1%80%E8%8F%9C%E5%8D%95%E6%90%9C%E7%B4%A2%E6%A1%86/</link>
      <pubDate>Mon, 20 Mar 2023 12:29:21 +0000</pubDate>
      
      <guid>http://shansec.github.io/post/blog/Vue-%E9%A1%B9%E7%9B%AE%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%85%A8%E5%B1%80%E8%8F%9C%E5%8D%95%E6%90%9C%E7%B4%A2%E6%A1%86/</guid>
      <description>前言 本篇文章分享一下我在实际开发 Vue 项目时遇到的需要 —— 全局菜单搜索。全局菜单搜索本质是 router 的使用，该功能已经实现，接下来分享一下开发心得。 一、过滤路由 首先需要过滤出符合条件的路由信息，过滤的条件包含两个： 路由可以显示出现（hidden: false） 路由元信息中包含 title 属性 代码展示： /**</description>
    </item>
    
  </channel>
</rss>
