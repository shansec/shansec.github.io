<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>typescript on 未来可期的博客</title>
    <link>http://shansec.github.io/tags/typescript/</link>
    <description>Recent content in typescript on 未来可期的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 26 Jun 2024 11:29:09 +0800</lastBuildDate><atom:link href="http://shansec.github.io/tags/typescript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Typescript Declare关键字</title>
      <link>http://shansec.github.io/post/ts/Typescript-declare%E5%85%B3%E9%94%AE%E5%AD%97/</link>
      <pubDate>Wed, 26 Jun 2024 11:29:09 +0800</pubDate>
      
      <guid>http://shansec.github.io/post/ts/Typescript-declare%E5%85%B3%E9%94%AE%E5%AD%97/</guid>
      <description>简介 declare 关键字用来告诉编译器，某个类型是存在的，可以在当前文件中使用。 它的主要作用，就是让当前文件可以使用其他文件声明的类型。举例来说，自己的脚本使用外部库定义的函数，编译器会因为不知道外部函数的类型定义而报错，这时就可以在自己的脚本里面使用declare关键字，告诉编译器外部函数</description>
    </item>
    
    <item>
      <title>Typescript 模块</title>
      <link>http://shansec.github.io/post/ts/Typescript-%E6%A8%A1%E5%9D%97/</link>
      <pubDate>Wed, 26 Jun 2024 11:16:23 +0800</pubDate>
      
      <guid>http://shansec.github.io/post/ts/Typescript-%E6%A8%A1%E5%9D%97/</guid>
      <description>简介 任何包含 import 或 export 语句的文件，就是一个模块（module）。相应地，如果文件不包含 export 语句，就是一个全局的脚本文件。 模块本身就是一个作用域，不属于全局作用域。模块内部的变量、函数、类只在内部可见，对于模块外部是不可见的。暴露给外部的接口，必须用 export 命令声明；如果其他文件要使用模块的接</description>
    </item>
    
    <item>
      <title>Typescript 类型断言</title>
      <link>http://shansec.github.io/post/ts/Typescript-%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80/</link>
      <pubDate>Wed, 26 Jun 2024 10:59:25 +0800</pubDate>
      
      <guid>http://shansec.github.io/post/ts/Typescript-%E7%B1%BB%E5%9E%8B%E6%96%AD%E8%A8%80/</guid>
      <description>简介 对于没有类型声明的值，TypeScript 会进行类型推断，很多时候得到的结果，未必是开发者想要的。 type T = &amp;#39;a&amp;#39;|&amp;#39;b&amp;#39;|&amp;#39;c&amp;#39;; let foo = &amp;#39;a&amp;#39;; let bar:T = foo; // 报错 上面示例中，最后一行报错，原因是 TypeScript 推断变量foo的类型是string，而变量bar的类型是&#39;a&#39;|&#39;b&#39;|&#39;c&#39;，前者是后者的父类型。父类型不能赋值</description>
    </item>
    
    <item>
      <title>Typescript Enum类型</title>
      <link>http://shansec.github.io/post/ts/Typescript-Enum%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Wed, 26 Jun 2024 09:45:05 +0800</pubDate>
      
      <guid>http://shansec.github.io/post/ts/Typescript-Enum%E7%B1%BB%E5%9E%8B/</guid>
      <description>简介 实际开发中，经常需要定义一组相关的常量。 const RED = 1; const GREEN = 2; const BLUE = 3; let color = userInput(); if (color === RED) {/* */} if (color === GREEN) {/* */} if (color === BLUE) {/* */} throw new Error(&amp;#39;wrong color&amp;#39;); 上面示例中，常量RED、GREEN、BLUE是相关的，意为变量color的三个可能的取值。它们具体等于什么值其实并不重要，只要不相等就可以了。 TypeScript 就设计了 Enum 结构，</description>
    </item>
    
    <item>
      <title>Typescript 泛型</title>
      <link>http://shansec.github.io/post/ts/Typescript-%E6%B3%9B%E5%9E%8B/</link>
      <pubDate>Wed, 26 Jun 2024 09:37:16 +0800</pubDate>
      
      <guid>http://shansec.github.io/post/ts/Typescript-%E6%B3%9B%E5%9E%8B/</guid>
      <description>简介 有些时候，函数返回值的类型与参数类型是相关的。 function getFirst(arr) { return arr[0]; } 上面示例中，函数getFirst()总是返回参数数组的第一个成员。参数数组是什么类型，返回值就是什么类型。 这个函数的类型声明只能写成下面这样。 function f(arr:any[]):any { return arr[0]; } 上面的类型声明，就反映不出参数与返回值之间的类型关系。 为了解决这</description>
    </item>
    
    <item>
      <title>Typescript Class类型</title>
      <link>http://shansec.github.io/post/ts/Typescript-class%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Tue, 25 Jun 2024 12:15:48 +0800</pubDate>
      
      <guid>http://shansec.github.io/post/ts/Typescript-class%E7%B1%BB%E5%9E%8B/</guid>
      <description>简介 类（class）是面向对象编程的基本构件，封装了属性和方法，TypeScript 给予了全面支持。 属性的类型 类的属性可以在顶层声明，也可以在构造方法内部声明。 对于顶层声明的属性，可以在声明时同时给出类型。 class Point { x:number; y:number; } 上面声明中，属性x和y的类型都是number。 如果不给出类型，</description>
    </item>
    
    <item>
      <title>Typescript Interface</title>
      <link>http://shansec.github.io/post/ts/Typescript-interface/</link>
      <pubDate>Mon, 24 Jun 2024 11:23:55 +0800</pubDate>
      
      <guid>http://shansec.github.io/post/ts/Typescript-interface/</guid>
      <description>简介 interface 是对象的模板，可以看作是一种类型约定，中文译为“接口”。使用了某个模板的对象，就拥有了指定的类型结构。 interface Person { firstName: string; lastName: string; age: number; } 上面示例中，定义了一个接口Person，它指定一个对象模板，拥有三个属性firstName、lastName和age。任何实现这个接口的对象，都必须部署</description>
    </item>
    
    <item>
      <title>Typescript 函数类型</title>
      <link>http://shansec.github.io/post/ts/typescript-%E5%87%BD%E6%95%B0%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Sat, 22 Jun 2024 11:31:20 +0800</pubDate>
      
      <guid>http://shansec.github.io/post/ts/typescript-%E5%87%BD%E6%95%B0%E7%B1%BB%E5%9E%8B/</guid>
      <description>简介 函数的类型声明，需要在声明函数时，给出参数的类型和返回值的类型。 function hello( txt:string ):void { console.log(&amp;#39;hello &amp;#39; + txt); } 上面示例中，函数hello()在声明时，需要给出参数txt的类型（string），以及返回值的类型（void），后者写在参数列表的圆括号后面。void类型表示没有返回值，详见后文。 如果不指定参</description>
    </item>
    
    <item>
      <title>Typescript 对象类型</title>
      <link>http://shansec.github.io/post/ts/typescript-%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Sat, 22 Jun 2024 11:31:20 +0800</pubDate>
      
      <guid>http://shansec.github.io/post/ts/typescript-%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B/</guid>
      <description>简介 除了原始类型，对象是 JavaScript 最基本的数据结构。TypeScript 对于对象类型有很多规则。 对象类型的最简单声明方法，就是使用大括号表示对象，在大括号内部声明每个属性和方法的类型。 const obj:{ x:number; y:number; } = { x: 1, y: 1 }; 上面示例中，对象obj的类型就写在变量名后面，使用大括号描述，内部声明每个属性的</description>
    </item>
    
    <item>
      <title>Typescript 数组类型</title>
      <link>http://shansec.github.io/post/ts/typescript-%E5%85%83%E7%BB%84%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Sat, 22 Jun 2024 11:31:20 +0800</pubDate>
      
      <guid>http://shansec.github.io/post/ts/typescript-%E5%85%83%E7%BB%84%E7%B1%BB%E5%9E%8B/</guid>
      <description>简介 元组（tuple）是 TypeScript 特有的数据类型，JavaScript 没有单独区分这种类型。它表示成员类型可以自由设置的数组，即数组的各个成员的类型可以不同。 由于成员的类型可以不一样，所以元组必须明确声明每个成员的类型。 const s:[string, string, boolean] = [&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, true]; 上面示例中，元组s的前两个成员的类型是string，</description>
    </item>
    
    <item>
      <title>Typescript 数组类型</title>
      <link>http://shansec.github.io/post/ts/typescript-%E6%95%B0%E7%BB%84%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Sat, 22 Jun 2024 11:31:20 +0800</pubDate>
      
      <guid>http://shansec.github.io/post/ts/typescript-%E6%95%B0%E7%BB%84%E7%B1%BB%E5%9E%8B/</guid>
      <description>JavaScript 数组在 TypeScript 里面分成两种类型，分别是数组（array）和元组（tuple）。 简介 TypeScript 数组有一个根本特征：所有成员的类型必须相同，但是成员数量是不确定的，可以是无限数量的成员，也可以是零成员。 数组的类型有两种写法。第一种写法是在数组成员的类型后面，加上一对方括号。 let arr:number[] = [1, 2, 3]; 上面示例中</description>
    </item>
    
    <item>
      <title>Typescript 类型系统</title>
      <link>http://shansec.github.io/post/ts/typescript-%E7%B1%BB%E5%9E%8B%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Sat, 22 Jun 2024 11:16:19 +0800</pubDate>
      
      <guid>http://shansec.github.io/post/ts/typescript-%E7%B1%BB%E5%9E%8B%E7%B3%BB%E7%BB%9F/</guid>
      <description>TypeScript 继承了 JavaScript 的类型，在这个基础上，定义了一套自己的类型系统。 基本类型 概述 JavaScript 语言（注意，不是 TypeScript）将值分成8种类型。 boolean string number bigint symbol object undefined null TypeScript 继承了 JavaScript 的类型设计，以上8种类型可以看作 TypeScript 的基本类型。 注意，上面所有类型的名称都是小写字母，首字母大写的Number、String、B</description>
    </item>
    
    <item>
      <title>Typescript Any类型和unknown类型和never类型</title>
      <link>http://shansec.github.io/post/ts/typescript-any%E7%B1%BB%E5%9E%8B%E5%92%8Cunknown%E7%B1%BB%E5%9E%8B%E5%92%8Cnever%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Sat, 22 Jun 2024 10:39:28 +0800</pubDate>
      
      <guid>http://shansec.github.io/post/ts/typescript-any%E7%B1%BB%E5%9E%8B%E5%92%8Cunknown%E7%B1%BB%E5%9E%8B%E5%92%8Cnever%E7%B1%BB%E5%9E%8B/</guid>
      <description>any 类型，unknown 类型，never 类型 本章介绍 TypeScript 的三种特殊类型，它们可以作为学习 TypeScript 类型系统的起点。 any 类型 基本含义 any 类型表示没有任何限制，该类型的变量可以赋予任意类型的值。 let x:any; x = 1; // 正确 x = &amp;#39;foo&amp;#39;; // 正确 x = true; // 正确 上面示例中，变量x的类型是any，就可以被赋值为任意类型的值。 变量</description>
    </item>
    
    <item>
      <title>Typescript 基本用法</title>
      <link>http://shansec.github.io/post/ts/typescript-%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</link>
      <pubDate>Sat, 22 Jun 2024 10:25:32 +0800</pubDate>
      
      <guid>http://shansec.github.io/post/ts/typescript-%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</guid>
      <description>类型声明 TypeScript 代码最明显的特征，就是为 JavaScript 变量加上了类型声明。 let foo:string; 上面示例中，变量foo的后面使用冒号，声明了它的类型为string。 类型声明的写法，一律为在标识符后面添加“冒号 + 类型”。函数参数和返回值，也是这样来声明类型。 function toString(num:number):string { return String(num); } 上面示例中，函数toString()的参数num</description>
    </item>
    
    <item>
      <title>何为 Vue3 组件标注 TS 类型，看这篇文章就够了！</title>
      <link>http://shansec.github.io/post/blog/%E5%A6%82%E4%BD%95%E4%B8%BA-Vue3-%E7%BB%84%E4%BB%B6%E6%A0%87%E6%B3%A8-TS-%E7%B1%BB%E5%9E%8B%E7%9C%8B%E8%BF%99%E7%AF%87%E6%96%87%E7%AB%A0%E5%B0%B1%E5%A4%9F%E4%BA%86/</link>
      <pubDate>Mon, 20 Mar 2023 14:15:59 +0000</pubDate>
      
      <guid>http://shansec.github.io/post/blog/%E5%A6%82%E4%BD%95%E4%B8%BA-Vue3-%E7%BB%84%E4%BB%B6%E6%A0%87%E6%B3%A8-TS-%E7%B1%BB%E5%9E%8B%E7%9C%8B%E8%BF%99%E7%AF%87%E6%96%87%E7%AB%A0%E5%B0%B1%E5%A4%9F%E4%BA%86/</guid>
      <description>前言 要说今年最热门的前端技术，Vue3 和 TS 绝对榜上有名了。今天就给大家分享一下如何在 Vue3 组件中结合 Composition-Api 使用 TS 类型。如果有不会或者不熟的小伙伴，一起学起来吧！ 一、为 props 标注类型 使用 &amp;lt; script setup &amp;gt; 当使用 &amp;lt; script setup &amp;gt; 时，defineProps() 宏函数支持从它的参数中推导类型： 这被称为 运行时声明 ，因为</description>
    </item>
    
  </channel>
</rss>
