<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>存储 on 未来可期的博客</title>
    <link>http://shansec.github.io/tags/%E5%AD%98%E5%82%A8/</link>
    <description>Recent content in 存储 on 未来可期的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 20 Apr 2024 10:39:46 +0000</lastBuildDate><atom:link href="http://shansec.github.io/tags/%E5%AD%98%E5%82%A8/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Cookie 和 Session</title>
      <link>http://shansec.github.io/post/Web/Cookie%E5%92%8CSession/</link>
      <pubDate>Sat, 20 Apr 2024 10:39:46 +0000</pubDate>
      
      <guid>http://shansec.github.io/post/Web/Cookie%E5%92%8CSession/</guid>
      <description>Cookie Cookie的由来 HTTP协议是无状态的，这就存在一个问题。 无状态的意思是每次请求都是独立的，它的执行情况和结果与前面的请求和之后的请求都无直接关系，它不会受前面的请求响应情况直接影响，也不会直接影响后面的请求响应情况。 一句有意思的话来描述就是人生只如初见，对服务器来说，每次的</description>
    </item>
    
    <item>
      <title>gin框架路由拆分与注册</title>
      <link>http://shansec.github.io/post/Web/gin%E6%A1%86%E6%9E%B6%E8%B7%AF%E7%94%B1%E6%8B%86%E5%88%86%E4%B8%8E%E6%B3%A8%E5%86%8C/</link>
      <pubDate>Sat, 20 Apr 2024 10:39:46 +0000</pubDate>
      
      <guid>http://shansec.github.io/post/Web/gin%E6%A1%86%E6%9E%B6%E8%B7%AF%E7%94%B1%E6%8B%86%E5%88%86%E4%B8%8E%E6%B3%A8%E5%86%8C/</guid>
      <description>gin框架路由拆分与注册 基本的路由注册 下面最基础的gin路由注册方式，适用于路由条目比较少的简单项目或者项目demo。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 package main import ( &amp;#34;net/http&amp;#34; &amp;#34;github.com/gin-gonic/gin&amp;#34; ) func helloHandler(c *gin.Context) { c.JSON(http.StatusOK, gin.H{ &amp;#34;message&amp;#34;: &amp;#34;Hello q1mi!&amp;#34;, }) } func main() { r := gin.Default() r.GET(&amp;#34;/hello&amp;#34;, helloHandler) if err := r.Run(); err != nil { fmt.Println(&amp;#34;startup service failed, err:%v\n&amp;#34;, err) } } 路由拆分成单独文件或包 当项目的规模增大</description>
    </item>
    
  </channel>
</rss>
